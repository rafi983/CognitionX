<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/conversation/[id]/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/conversation/[id]/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useRef, useState } from &quot;react&quot;;&#10;import { useRouter, useParams } from &quot;next/navigation&quot;;&#10;import { Sidebar } from &quot;@/components/Sidebar&quot;;&#10;import { Message, LoadingSkeleton } from &quot;@/components/Message&quot;;&#10;import { ConversationInput } from &quot;@/components/ConversationInput&quot;;&#10;import { ExportButton } from &quot;@/components/ExportButton&quot;;&#10;import { PERSONAS } from &quot;@/lib/personas&quot;;&#10;import { useSpeech } from &quot;@/hooks/useSpeech&quot;;&#10;import { useMagicCommands } from &quot;@/hooks/useMagicCommands&quot;;&#10;import { useStreaming } from &quot;@/hooks/useStreaming&quot;;&#10;import { useImageUpload } from &quot;@/hooks/useImageUpload&quot;;&#10;import { isMagicCommand } from &quot;@/lib/magicCommands&quot;;&#10;&#10;export default function ConversationPage() {&#10;  const params = useParams();&#10;  const conversationId = params.id;&#10;  const router = useRouter();&#10;  const bottomRef = useRef(null);&#10;&#10;  // Core state&#10;  const [messages, setMessages] = useState([]);&#10;  const [conversation, setConversation] = useState(null);&#10;  const [input, setInput] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [models, setModels] = useState([]);&#10;  const [selectedModel, setSelectedModel] = useState(&quot;&quot;);&#10;  const [notFound, setNotFound] = useState(false);&#10;  const [showPersonaSettings, setShowPersonaSettings] = useState(false);&#10;  const [selectedPersona, setSelectedPersona] = useState(&quot;default&quot;);&#10;  const [customPrompt, setCustomPrompt] = useState(&quot;&quot;);&#10;&#10;  // Custom hooks&#10;  const { isListening, speechError, startListening, stopListening } =&#10;    useSpeech();&#10;  const {&#10;    isStreaming,&#10;    setIsStreaming,&#10;    handleStreamingResponse,&#10;    handleMessageRegenerate,&#10;  } = useStreaming(conversationId);&#10;  const {&#10;    selectedImage,&#10;    imagePreview,&#10;    isUploadingImage,&#10;    handleUploadImage,&#10;    removeImage,&#10;    setSelectedImage,&#10;    setImagePreview,&#10;  } = useImageUpload();&#10;  const {&#10;    showCommandSuggestions,&#10;    commandSuggestions,&#10;    handleInputChange: handleMagicInputChange,&#10;    selectCommandSuggestion,&#10;    executeMagicCommandWithStreaming,&#10;  } = useMagicCommands(messages, conversationId, selectedModel);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!conversationId) return;&#10;    fetch(`/api/conversation/${conversationId}`)&#10;      .then((res) =&gt; res.json())&#10;      .then((data) =&gt; {&#10;        if (data.error || !data.conversation) {&#10;          setNotFound(true);&#10;          setConversation(null);&#10;          setMessages([]);&#10;        } else {&#10;          setConversation(data.conversation);&#10;          setMessages(data.messages || []);&#10;          setSelectedModel(data.conversation?.model || &quot;&quot;);&#10;&#10;          const systemPrompt = data.conversation?.systemPrompt || &quot;&quot;;&#10;          const matchingPersona = PERSONAS.find(&#10;            (p) =&gt; p.systemPrompt === systemPrompt,&#10;          );&#10;          if (matchingPersona) {&#10;            setSelectedPersona(matchingPersona.id);&#10;          } else if (systemPrompt) {&#10;            setSelectedPersona(&quot;custom&quot;);&#10;            setCustomPrompt(systemPrompt);&#10;          } else {&#10;            setSelectedPersona(&quot;default&quot;);&#10;          }&#10;&#10;          setNotFound(false);&#10;        }&#10;      });&#10;    fetch(&quot;/api/models&quot;)&#10;      .then((res) =&gt; res.json())&#10;      .then((data) =&gt; setModels(data.models || []));&#10;  }, [conversationId]);&#10;&#10;  const getSystemPrompt = () =&gt; {&#10;    if (selectedPersona === &quot;custom&quot;) {&#10;      return customPrompt;&#10;    }&#10;    const persona = PERSONAS.find((p) =&gt; p.id === selectedPersona);&#10;    return persona?.systemPrompt || &quot;&quot;;&#10;  };&#10;&#10;  const getCurrentPersona = () =&gt; {&#10;    if (selectedPersona === &quot;custom&quot;) {&#10;      return {&#10;        id: &quot;custom&quot;,&#10;        name: &quot;Custom&quot;,&#10;        emoji: &quot;&quot;,&#10;        description: &quot;Custom system prompt&quot;,&#10;      };&#10;    }&#10;    return PERSONAS.find((p) =&gt; p.id === selectedPersona) || PERSONAS[0];&#10;  };&#10;&#10;  const handlePersonaChange = async (persona) =&gt; {&#10;    setSelectedPersona(persona.id);&#10;    if (persona.id === &quot;custom&quot;) {&#10;      setShowPersonaSettings(true);&#10;    } else {&#10;      const newSystemPrompt = persona.systemPrompt || &quot;&quot;;&#10;      try {&#10;        setLoading(true);&#10;        const response = await fetch(`/api/conversation/${conversationId}`, {&#10;          method: &quot;PATCH&quot;,&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;          body: JSON.stringify({ systemPrompt: newSystemPrompt }),&#10;        });&#10;&#10;        if (!response.ok) {&#10;          throw new Error(&quot;Failed to update persona&quot;);&#10;        }&#10;&#10;        const result = await response.json();&#10;        setConversation((prev) =&gt; ({ ...prev, systemPrompt: newSystemPrompt }));&#10;      } catch (error) {&#10;        console.error(&quot;Failed to update persona:&quot;, error);&#10;        setError(&quot;Failed to update persona. Please try again.&quot;);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    }&#10;  };&#10;&#10;  const handleCustomPromptSave = async () =&gt; {&#10;    try {&#10;      await fetch(`/api/conversation/${conversationId}`, {&#10;        method: &quot;PATCH&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ systemPrompt: customPrompt }),&#10;      });&#10;      setConversation((prev) =&gt; ({ ...prev, systemPrompt: customPrompt }));&#10;      setShowPersonaSettings(false);&#10;    } catch (error) {&#10;      console.error(&quot;Failed to update custom prompt:&quot;, error);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    bottomRef.current?.scrollIntoView({ behavior: &quot;smooth&quot; });&#10;  }, [messages]);&#10;&#10;  const handleModelChange = async (e) =&gt; {&#10;    const newModel = e.target.value;&#10;    setSelectedModel(newModel);&#10;    await fetch(`/api/conversation/${conversationId}`, {&#10;      method: &quot;PATCH&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ model: newModel }),&#10;    });&#10;    setConversation((prev) =&gt; ({ ...prev, model: newModel }));&#10;  };&#10;&#10;  // Event handlers&#10;  const handleInputChange = (value) =&gt; {&#10;    handleMagicInputChange(value, setInput);&#10;  };&#10;&#10;  const handleSubmit = async () =&gt; {&#10;    if (!input.trim() &amp;&amp; !imagePreview) return;&#10;&#10;    if (isMagicCommand(input)) {&#10;      await executeMagicCommandWithStreaming({&#10;        commandInput: input,&#10;        setMessages,&#10;        setInput,&#10;        setLoading,&#10;        setIsStreaming,&#10;        setError,&#10;      });&#10;    } else {&#10;      await handleStreamingResponse({&#10;        messageText: input,&#10;        imagePreview,&#10;        imageData: selectedImage?.base64Data,&#10;        setMessages,&#10;        setInput,&#10;        setLoading,&#10;        setError,&#10;        setSelectedImage,&#10;        setImagePreview,&#10;        selectedImage,&#10;      });&#10;    }&#10;  };&#10;&#10;  const handleMessageRegeneration = () =&gt; {&#10;    handleMessageRegenerate({&#10;      messages,&#10;      setMessages,&#10;      setLoading,&#10;      setError,&#10;    });&#10;  };&#10;&#10;  const handleMessageEdit = async (messageId, newContent) =&gt; {&#10;    await handleStreamingResponse({&#10;      messageText: newContent,&#10;      imagePreview: null,&#10;      imageData: null,&#10;      setMessages,&#10;      setInput: () =&gt; {},&#10;      setLoading,&#10;      setError,&#10;      setSelectedImage,&#10;      setImagePreview,&#10;      selectedImage: null,&#10;    });&#10;  };&#10;&#10;  const handleVoiceInput = (transcript, autoSend = false) =&gt; {&#10;    setInput(transcript);&#10;    if (autoSend &amp;&amp; transcript.trim()) {&#10;      setTimeout(() =&gt; {&#10;        handleSubmit();&#10;      }, 100);&#10;    }&#10;  };&#10;&#10;  const handleSelectCommandSuggestion = (suggestion) =&gt; {&#10;    selectCommandSuggestion(suggestion, setInput);&#10;  };&#10;&#10;  if (notFound) {&#10;    return (&#10;      &lt;div className=&quot;flex h-screen items-center justify-center bg-white&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-800 mb-4&quot;&gt;&#10;            Conversation not found&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 mb-6&quot;&gt;&#10;            This conversation may have been deleted or never existed.&#10;          &lt;/p&gt;&#10;          &lt;a href=&quot;/&quot; className=&quot;text-blue-600 hover:underline&quot;&gt;&#10;            Go back to home&#10;          &lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex h-screen mx-auto bg-white max-h-screen&quot;&gt;&#10;      &lt;Sidebar /&gt;&#10;      &lt;main className=&quot;flex-1 flex flex-col bg-white&quot;&gt;&#10;        &lt;header className=&quot;px-8 py-4 border-b border-gray-200 bg-white sticky top-0 z-10&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              &lt;div className=&quot;w-3 h-3 bg-green-500 rounded-full&quot; /&gt;&#10;              &lt;h1 className=&quot;text-lg font-semibold text-gray-800 truncate max-w-xs&quot;&gt;&#10;                {conversation?.title || &quot;Conversation&quot;}&#10;              &lt;/h1&gt;&#10;            &lt;/div&gt;&#10;            {conversation &amp;&amp; (&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;ExportButton&#10;                  conversationId={conversationId}&#10;                  className=&quot;p-2 hover:bg-gray-100 rounded-lg transition-colors&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/header&gt;&#10;&#10;        &lt;div className=&quot;flex-1 flex flex-col p-8 overflow-y-auto space-y-6&quot;&gt;&#10;          {messages.map((msg, index) =&gt; {&#10;            const isLastAIMessage =&#10;              msg.role === &quot;assistant&quot; &amp;&amp; index === messages.length - 1;&#10;            const hasPreviousUserMessage =&#10;              index &gt; 0 &amp;&amp; messages[index - 1].role === &quot;user&quot;;&#10;&#10;            return (&#10;              &lt;Message&#10;                key={msg._id}&#10;                isAI={msg.role === &quot;assistant&quot;}&#10;                content={msg.content}&#10;                imageUrl={&#10;                  msg.imageUrl &amp;&amp;&#10;                  (msg.imageUrl.startsWith(&quot;/&quot;) ||&#10;                    msg.imageUrl.startsWith(&quot;http&quot;))&#10;                    ? msg.imageUrl&#10;                    : null&#10;                }&#10;                imageData={&#10;                  msg.imageData ||&#10;                  (msg.imageUrl &amp;&amp; msg.imageUrl.startsWith(&quot;data:&quot;)&#10;                    ? msg.imageUrl&#10;                    : null)&#10;                }&#10;                isStreaming={msg.isStreaming}&#10;                time={new Date(msg.createdAt).toLocaleTimeString([], {&#10;                  hour: &quot;2-digit&quot;,&#10;                  minute: &quot;2-digit&quot;,&#10;                })}&#10;                messageId={msg._id}&#10;                onRegenerate={handleMessageRegeneration}&#10;                onEdit={handleMessageEdit}&#10;                isLastUserMessage={isLastAIMessage &amp;&amp; hasPreviousUserMessage}&#10;              /&gt;&#10;            );&#10;          })}&#10;          {loading &amp;&amp; !isStreaming &amp;&amp; &lt;LoadingSkeleton /&gt;}&#10;          &lt;div ref={bottomRef} /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;ConversationInput&#10;          input={input}&#10;          setInput={setInput}&#10;          onSubmit={handleSubmit}&#10;          onInputChange={handleInputChange}&#10;          onVoiceInput={handleVoiceInput}&#10;          onImageUpload={(e) =&gt; handleUploadImage(e, setError)}&#10;          imagePreview={imagePreview}&#10;          onRemoveImage={removeImage}&#10;          selectedPersona={selectedPersona}&#10;          onPersonaChange={handlePersonaChange}&#10;          customPrompt={customPrompt}&#10;          onCustomPromptChange={setCustomPrompt}&#10;          models={models}&#10;          selectedModel={selectedModel}&#10;          onModelChange={handleModelChange}&#10;          loading={loading}&#10;          isUploadingImage={isUploadingImage}&#10;          isListening={isListening}&#10;          startListening={startListening}&#10;          stopListening={stopListening}&#10;          showCommandSuggestions={showCommandSuggestions}&#10;          commandSuggestions={commandSuggestions}&#10;          onSelectCommandSuggestion={handleSelectCommandSuggestion}&#10;          speechError={speechError}&#10;          error={error}&#10;        /&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useRef, useState } from &quot;react&quot;;&#10;import { useRouter, useParams } from &quot;next/navigation&quot;;&#10;import { Sidebar } from &quot;@/components/Sidebar&quot;;&#10;import { Message, LoadingSkeleton } from &quot;@/components/Message&quot;;&#10;import { ConversationInput } from &quot;@/components/ConversationInput&quot;;&#10;import { ExportButton } from &quot;@/components/ExportButton&quot;;&#10;import { PERSONAS } from &quot;@/lib/personas&quot;;&#10;import { useSpeech } from &quot;@/hooks/useSpeech&quot;;&#10;import { useMagicCommands } from &quot;@/hooks/useMagicCommands&quot;;&#10;import { useStreaming } from &quot;@/hooks/useStreaming&quot;;&#10;import { useImageUpload } from &quot;@/hooks/useImageUpload&quot;;&#10;import { isMagicCommand } from &quot;@/lib/magicCommands&quot;;&#10;&#10;export default function ConversationPage() {&#10;  const params = useParams();&#10;  const conversationId = params.id;&#10;  const router = useRouter();&#10;  const bottomRef = useRef(null);&#10;&#10;  // Core state&#10;  const [messages, setMessages] = useState([]);&#10;  const [conversation, setConversation] = useState(null);&#10;  const [input, setInput] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [models, setModels] = useState([]);&#10;  const [selectedModel, setSelectedModel] = useState(&quot;&quot;);&#10;  const [notFound, setNotFound] = useState(false);&#10;  const [showPersonaSettings, setShowPersonaSettings] = useState(false);&#10;  const [selectedPersona, setSelectedPersona] = useState(&quot;default&quot;);&#10;  const [customPrompt, setCustomPrompt] = useState(&quot;&quot;);&#10;&#10;  // Custom hooks&#10;  const { isListening, speechError, startListening, stopListening } =&#10;    useSpeech();&#10;  const {&#10;    isStreaming,&#10;    setIsStreaming,&#10;    handleStreamingResponse,&#10;    handleMessageRegenerate,&#10;  } = useStreaming(conversationId);&#10;  const {&#10;    selectedImage,&#10;    imagePreview,&#10;    isUploadingImage,&#10;    handleUploadImage,&#10;    removeImage,&#10;    setSelectedImage,&#10;    setImagePreview,&#10;  } = useImageUpload();&#10;  const {&#10;    showCommandSuggestions,&#10;    commandSuggestions,&#10;    handleInputChange: handleMagicInputChange,&#10;    selectCommandSuggestion,&#10;    executeMagicCommandWithStreaming,&#10;  } = useMagicCommands(messages, conversationId, selectedModel);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!conversationId) return;&#10;    fetch(`/api/conversation/${conversationId}`)&#10;      .then((res) =&gt; res.json())&#10;      .then((data) =&gt; {&#10;        if (data.error || !data.conversation) {&#10;          setNotFound(true);&#10;          setConversation(null);&#10;          setMessages([]);&#10;        } else {&#10;          setConversation(data.conversation);&#10;          setMessages(data.messages || []);&#10;          setSelectedModel(data.conversation?.model || &quot;&quot;);&#10;&#10;          const systemPrompt = data.conversation?.systemPrompt || &quot;&quot;;&#10;          const matchingPersona = PERSONAS.find(&#10;            (p) =&gt; p.systemPrompt === systemPrompt,&#10;          );&#10;          if (matchingPersona) {&#10;            setSelectedPersona(matchingPersona.id);&#10;          } else if (systemPrompt) {&#10;            setSelectedPersona(&quot;custom&quot;);&#10;            setCustomPrompt(systemPrompt);&#10;          } else {&#10;            setSelectedPersona(&quot;default&quot;);&#10;          }&#10;&#10;          setNotFound(false);&#10;        }&#10;      });&#10;    fetch(&quot;/api/models&quot;)&#10;      .then((res) =&gt; res.json())&#10;      .then((data) =&gt; setModels(data.models || []));&#10;  }, [conversationId]);&#10;&#10;  const getSystemPrompt = () =&gt; {&#10;    if (selectedPersona === &quot;custom&quot;) {&#10;      return customPrompt;&#10;    }&#10;    const persona = PERSONAS.find((p) =&gt; p.id === selectedPersona);&#10;    return persona?.systemPrompt || &quot;&quot;;&#10;  };&#10;&#10;  const getCurrentPersona = () =&gt; {&#10;    if (selectedPersona === &quot;custom&quot;) {&#10;      return {&#10;        id: &quot;custom&quot;,&#10;        name: &quot;Custom&quot;,&#10;        emoji: &quot;&quot;,&#10;        description: &quot;Custom system prompt&quot;,&#10;      };&#10;    }&#10;    return PERSONAS.find((p) =&gt; p.id === selectedPersona) || PERSONAS[0];&#10;  };&#10;&#10;  const handlePersonaChange = async (persona) =&gt; {&#10;    setSelectedPersona(persona.id);&#10;    if (persona.id === &quot;custom&quot;) {&#10;      setShowPersonaSettings(true);&#10;    } else {&#10;      const newSystemPrompt = persona.systemPrompt || &quot;&quot;;&#10;      try {&#10;        setLoading(true);&#10;        const response = await fetch(`/api/conversation/${conversationId}`, {&#10;          method: &quot;PATCH&quot;,&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;          body: JSON.stringify({ systemPrompt: newSystemPrompt }),&#10;        });&#10;&#10;        if (!response.ok) {&#10;          throw new Error(&quot;Failed to update persona&quot;);&#10;        }&#10;&#10;        const result = await response.json();&#10;        setConversation((prev) =&gt; ({ ...prev, systemPrompt: newSystemPrompt }));&#10;      } catch (error) {&#10;        console.error(&quot;Failed to update persona:&quot;, error);&#10;        setError(&quot;Failed to update persona. Please try again.&quot;);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    }&#10;  };&#10;&#10;  const handleCustomPromptSave = async () =&gt; {&#10;    try {&#10;      await fetch(`/api/conversation/${conversationId}`, {&#10;        method: &quot;PATCH&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ systemPrompt: customPrompt }),&#10;      });&#10;      setConversation((prev) =&gt; ({ ...prev, systemPrompt: customPrompt }));&#10;      setShowPersonaSettings(false);&#10;    } catch (error) {&#10;      console.error(&quot;Failed to update custom prompt:&quot;, error);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    bottomRef.current?.scrollIntoView({ behavior: &quot;smooth&quot; });&#10;  }, [messages]);&#10;&#10;  const handleModelChange = async (e) =&gt; {&#10;    const newModel = e.target.value;&#10;    setSelectedModel(newModel);&#10;    await fetch(`/api/conversation/${conversationId}`, {&#10;      method: &quot;PATCH&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ model: newModel }),&#10;    });&#10;    setConversation((prev) =&gt; ({ ...prev, model: newModel }));&#10;  };&#10;&#10;  // Event handlers&#10;  const handleInputChange = (value) =&gt; {&#10;    handleMagicInputChange(value, setInput);&#10;  };&#10;&#10;  const handleSubmit = async () =&gt; {&#10;    if (!input.trim() &amp;&amp; !imagePreview) return;&#10;&#10;    if (isMagicCommand(input)) {&#10;      await executeMagicCommandWithStreaming({&#10;        commandInput: input,&#10;        setMessages,&#10;        setInput,&#10;        setLoading,&#10;        setIsStreaming,&#10;        setError,&#10;      });&#10;    } else {&#10;      await handleStreamingResponse({&#10;        messageText: input,&#10;        imagePreview,&#10;        imageData: selectedImage?.base64Data,&#10;        setMessages,&#10;        setInput,&#10;        setLoading,&#10;        setError,&#10;        setSelectedImage,&#10;        setImagePreview,&#10;        selectedImage,&#10;      });&#10;    }&#10;  };&#10;&#10;  const handleMessageRegeneration = () =&gt; {&#10;    handleMessageRegenerate({&#10;      messages,&#10;      setMessages,&#10;      setLoading,&#10;      setError,&#10;    });&#10;  };&#10;&#10;  const handleMessageEdit = async (messageId, newContent) =&gt; {&#10;    await handleStreamingResponse({&#10;      messageText: newContent,&#10;      imagePreview: null,&#10;      imageData: null,&#10;      setMessages,&#10;      setInput: () =&gt; {},&#10;      setLoading,&#10;      setError,&#10;      setSelectedImage,&#10;      setImagePreview,&#10;      selectedImage: null,&#10;    });&#10;  };&#10;&#10;  const handleVoiceInput = (transcript, autoSend = false) =&gt; {&#10;    setInput(transcript);&#10;    if (autoSend &amp;&amp; transcript.trim()) {&#10;      setTimeout(() =&gt; {&#10;        handleSubmit();&#10;      }, 100);&#10;    }&#10;  };&#10;&#10;  const handleSelectCommandSuggestion = (suggestion) =&gt; {&#10;    selectCommandSuggestion(suggestion, setInput);&#10;  };&#10;&#10;  if (notFound) {&#10;    return (&#10;      &lt;div className=&quot;flex h-screen items-center justify-center bg-white dark:bg-gray-900&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-800 dark:text-white mb-4&quot;&gt;&#10;            Conversation not found&#10;          &lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400 mb-6&quot;&gt;&#10;            This conversation may have been deleted or never existed.&#10;          &lt;/p&gt;&#10;          &lt;a&#10;            href=&quot;/&quot;&#10;            className=&quot;text-blue-600 dark:text-blue-400 hover:underline&quot;&#10;          &gt;&#10;            Go back to home&#10;          &lt;/a&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex h-screen mx-auto bg-white dark:bg-gray-900 max-h-screen&quot;&gt;&#10;      &lt;Sidebar /&gt;&#10;      &lt;main className=&quot;flex-1 flex flex-col bg-white dark:bg-gray-900&quot;&gt;&#10;        &lt;header className=&quot;px-8 py-4 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 sticky top-0 z-10&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              &lt;div className=&quot;w-3 h-3 bg-green-500 rounded-full&quot; /&gt;&#10;              &lt;h1 className=&quot;text-lg font-semibold text-gray-800 dark:text-white truncate max-w-xs&quot;&gt;&#10;                {conversation?.title || &quot;Conversation&quot;}&#10;              &lt;/h1&gt;&#10;            &lt;/div&gt;&#10;            {conversation &amp;&amp; (&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;ExportButton&#10;                  conversationId={conversationId}&#10;                  className=&quot;p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/header&gt;&#10;&#10;        &lt;div className=&quot;flex-1 flex flex-col p-8 overflow-y-auto space-y-6&quot;&gt;&#10;          {messages.map((msg, index) =&gt; {&#10;            const isLastAIMessage =&#10;              msg.role === &quot;assistant&quot; &amp;&amp; index === messages.length - 1;&#10;            const hasPreviousUserMessage =&#10;              index &gt; 0 &amp;&amp; messages[index - 1].role === &quot;user&quot;;&#10;&#10;            return (&#10;              &lt;Message&#10;                key={msg._id}&#10;                isAI={msg.role === &quot;assistant&quot;}&#10;                content={msg.content}&#10;                imageUrl={&#10;                  msg.imageUrl &amp;&amp;&#10;                  (msg.imageUrl.startsWith(&quot;/&quot;) ||&#10;                    msg.imageUrl.startsWith(&quot;http&quot;))&#10;                    ? msg.imageUrl&#10;                    : null&#10;                }&#10;                imageData={&#10;                  msg.imageData ||&#10;                  (msg.imageUrl &amp;&amp; msg.imageUrl.startsWith(&quot;data:&quot;)&#10;                    ? msg.imageUrl&#10;                    : null)&#10;                }&#10;                isStreaming={msg.isStreaming}&#10;                time={new Date(msg.createdAt).toLocaleTimeString([], {&#10;                  hour: &quot;2-digit&quot;,&#10;                  minute: &quot;2-digit&quot;,&#10;                })}&#10;                messageId={msg._id}&#10;                onRegenerate={handleMessageRegeneration}&#10;                onEdit={handleMessageEdit}&#10;                isLastUserMessage={isLastAIMessage &amp;&amp; hasPreviousUserMessage}&#10;              /&gt;&#10;            );&#10;          })}&#10;          {loading &amp;&amp; !isStreaming &amp;&amp; &lt;LoadingSkeleton /&gt;}&#10;          &lt;div ref={bottomRef} /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;ConversationInput&#10;          input={input}&#10;          setInput={setInput}&#10;          onSubmit={handleSubmit}&#10;          onInputChange={handleInputChange}&#10;          onVoiceInput={handleVoiceInput}&#10;          onImageUpload={(e) =&gt; handleUploadImage(e, setError)}&#10;          imagePreview={imagePreview}&#10;          onRemoveImage={removeImage}&#10;          selectedPersona={selectedPersona}&#10;          onPersonaChange={handlePersonaChange}&#10;          customPrompt={customPrompt}&#10;          onCustomPromptChange={setCustomPrompt}&#10;          models={models}&#10;          selectedModel={selectedModel}&#10;          onModelChange={handleModelChange}&#10;          loading={loading}&#10;          isUploadingImage={isUploadingImage}&#10;          isListening={isListening}&#10;          startListening={startListening}&#10;          stopListening={stopListening}&#10;          showCommandSuggestions={showCommandSuggestions}&#10;          commandSuggestions={commandSuggestions}&#10;          onSelectCommandSuggestion={handleSelectCommandSuggestion}&#10;          speechError={speechError}&#10;          error={error}&#10;        /&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/page.js" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useRef } from &quot;react&quot;;&#10;import { useAuth } from &quot;@/contexts/AuthContext&quot;;&#10;import LoginForm from &quot;@/components/LoginForm&quot;;&#10;import RegisterForm from &quot;@/components/RegisterForm&quot;;&#10;import { Sidebar } from &quot;@/components/Sidebar&quot;;&#10;import { Zap, ArrowRight, ImageIcon, X } from &quot;lucide-react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useSpeech } from &quot;@/hooks/useSpeech&quot;;&#10;import { VoiceInputButton } from &quot;@/components/SpeechControls&quot;;&#10;import { PersonaSelector } from &quot;@/components/PersonaSelector&quot;;&#10;import { PERSONAS } from &quot;@/lib/personas&quot;;&#10;import {&#10;  isMagicCommand,&#10;  parseMagicCommand,&#10;  executeMagicCommand,&#10;  getMagicCommandSuggestions,&#10;} from &quot;@/lib/magicCommands&quot;;&#10;&#10;const SUGGESTIONS = [&#10;  &quot;Generate a list of creative marketing ideas.&quot;,&#10;  &quot;/help - Show all available magic commands&quot;,&#10;  &quot;/brainstorm marketing ideas for a coffee shop&quot;,&#10;];&#10;&#10;const LoadingSkeleton = () =&gt; (&#10;  &lt;div className=&quot;flex items-center space-x-3 animate-pulse mt-8 w-full max-w-2xl&quot;&gt;&#10;    &lt;div className=&quot;w-8 h-8 rounded-full bg-gradient-to-r from-purple-300 to-pink-300 flex-shrink-0&quot; /&gt;&#10;    &lt;div className=&quot;flex-1&quot;&gt;&#10;      &lt;div className=&quot;rounded-2xl px-4 py-3 max-w-2xl bg-gray-100 h-6 mb-2&quot; /&gt;&#10;      &lt;div className=&quot;rounded-2xl px-4 py-3 max-w-xl bg-gray-100 h-4&quot; /&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;);&#10;&#10;export default function WelcomePage() {&#10;  const [input, setInput] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [models, setModels] = useState([]);&#10;  const [selectedModel, setSelectedModel] = useState(&quot;&quot;);&#10;  const [selectedPersona, setSelectedPersona] = useState(&quot;default&quot;);&#10;  const [customPrompt, setCustomPrompt] = useState(&quot;&quot;);&#10;  const [, setSelectedImage] = useState(null);&#10;  const [imagePreview, setImagePreview] = useState(null);&#10;  const [isUploadingImage, setIsUploadingImage] = useState(false);&#10;  const [showLogin, setShowLogin] = useState(true);&#10;  const [showCommandSuggestions, setShowCommandSuggestions] = useState(false);&#10;  const [commandSuggestions, setCommandSuggestions] = useState([]);&#10;  const fileInputRef = useRef(null);&#10;  const router = useRouter();&#10;&#10;  const { isListening, speechError, startListening, stopListening } =&#10;    useSpeech();&#10;  const { user, loading: authLoading, isAuthenticated } = useAuth();&#10;&#10;  useEffect(() =&gt; {&#10;    fetch(&quot;/api/models&quot;)&#10;      .then((res) =&gt; {&#10;        if (!res.ok) {&#10;          throw new Error(&#10;            `Failed to fetch models: ${res.status} ${res.statusText}`,&#10;          );&#10;        }&#10;        return res.json();&#10;      })&#10;      .then((data) =&gt; {&#10;        setModels(data.models || []);&#10;        if (data.models &amp;&amp; data.models.length &gt; 0) {&#10;          setSelectedModel(data.models[0].name);&#10;        }&#10;      })&#10;      .catch((error) =&gt; {&#10;        setError(&quot;Failed to load models. Please refresh the page.&quot;);&#10;      });&#10;  }, []);&#10;&#10;  if (authLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!isAuthenticated) {&#10;    return showLogin ? (&#10;      &lt;LoginForm onSwitchToRegister={() =&gt; setShowLogin(false)} /&gt;&#10;    ) : (&#10;      &lt;RegisterForm onSwitchToLogin={() =&gt; setShowLogin(true)} /&gt;&#10;    );&#10;  }&#10;&#10;  const getSystemPrompt = () =&gt; {&#10;    if (selectedPersona === &quot;custom&quot;) {&#10;      return customPrompt;&#10;    }&#10;    const persona = PERSONAS.find((p) =&gt; p.id === selectedPersona);&#10;    return persona?.systemPrompt || &quot;&quot;;&#10;  };&#10;&#10;  const handleUploadImage = async (e) =&gt; {&#10;    const file = e.target.files?.[0];&#10;    if (!file) return;&#10;    setIsUploadingImage(true);&#10;    setError(&quot;&quot;);&#10;&#10;    const formData = new FormData();&#10;    formData.append(&quot;image&quot;, file);&#10;&#10;    try {&#10;      const response = await fetch(&quot;/api/upload&quot;, {&#10;        method: &quot;POST&quot;,&#10;        body: formData,&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json();&#10;        throw new Error(errorData.error || &quot;Failed to upload image&quot;);&#10;      }&#10;&#10;      const data = await response.json();&#10;      setImagePreview(data.base64Data);&#10;      setSelectedImage({&#10;        url: data.url,&#10;        base64Data: data.base64Data,&#10;      });&#10;    } catch (e) {&#10;      setError(`Image upload failed: ${e.message}`);&#10;    } finally {&#10;      setIsUploadingImage(false);&#10;    }&#10;  };&#10;&#10;  const handleInputChange = (value) =&gt; {&#10;    setInput(value);&#10;&#10;    if (isMagicCommand(value)) {&#10;      const query = value.slice(1).toLowerCase();&#10;      const suggestions = getMagicCommandSuggestions(query);&#10;      setCommandSuggestions(suggestions);&#10;      setShowCommandSuggestions(suggestions.length &gt; 0);&#10;    } else {&#10;      setShowCommandSuggestions(false);&#10;      setCommandSuggestions([]);&#10;    }&#10;  };&#10;&#10;  const handleMagicCommand = async (commandInput) =&gt; {&#10;    const { command, args, isValid } = parseMagicCommand(commandInput);&#10;&#10;    if (!isValid) {&#10;      setError(&#10;        `Unknown command: ${command}. Type /help to see available commands.`,&#10;      );&#10;      return;&#10;    }&#10;&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;&#10;    try {&#10;      const result = await executeMagicCommand(&#10;        command,&#10;        args,&#10;        [],&#10;        null,&#10;        selectedModel,&#10;      );&#10;&#10;      if (result.success) {&#10;        const res = await fetch(&quot;/api/conversation&quot;, {&#10;          method: &quot;POST&quot;,&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;          body: JSON.stringify({&#10;            title: commandInput.slice(0, 40),&#10;            message: commandInput,&#10;            model: selectedModel,&#10;            systemPrompt: getSystemPrompt(),&#10;            magicCommandResult: result.result,&#10;          }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;          throw new Error(&quot;Failed to create conversation&quot;);&#10;        }&#10;&#10;        const data = await res.json();&#10;        router.push(`/conversation/${data.conversation._id}`);&#10;      } else {&#10;        setError(result.error);&#10;      }&#10;    } catch (error) {&#10;      setError(`Command failed: ${error.message}`);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleSend = async (prompt) =&gt; {&#10;    if (!prompt &amp;&amp; !imagePreview) return;&#10;    if (!selectedModel) return;&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    try {&#10;      const res = await fetch(&quot;/api/conversation&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          title: prompt?.slice(0, 40) || &quot;Image conversation&quot;,&#10;          message: prompt || &quot;Image attached&quot;,&#10;          model: selectedModel,&#10;          systemPrompt: getSystemPrompt(),&#10;          imageUrl: imagePreview,&#10;        }),&#10;      });&#10;&#10;      if (!res.ok) {&#10;        const errorData = await res.text();&#10;        throw new Error(`Failed to create conversation: ${res.status}`);&#10;      }&#10;&#10;      const data = await res.json();&#10;      if (!data || !data.conversation || !data.conversation._id) {&#10;        throw new Error(&quot;Invalid response from server&quot;);&#10;      }&#10;&#10;      router.push(`/conversation/${data.conversation._id}`);&#10;    } catch (e) {&#10;      setError(`Failed to start chat: ${e.message}`);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleSubmit = async (inputText = null) =&gt; {&#10;    const textToSend = inputText || input;&#10;    if (!textToSend.trim() &amp;&amp; !imagePreview) return;&#10;&#10;    if (isMagicCommand(textToSend)) {&#10;      await handleMagicCommand(textToSend);&#10;    } else {&#10;      await handleSend(textToSend);&#10;    }&#10;  };&#10;&#10;  const handleInputFocus = () =&gt; {};&#10;&#10;  const handleUploadClick = () =&gt; {&#10;    fileInputRef.current?.click();&#10;  };&#10;&#10;  const handleVoiceClick = () =&gt; {&#10;    startListening(handleVoiceInput, true);&#10;  };&#10;&#10;  const handleVoiceInput = (transcript) =&gt; {&#10;    setInput(transcript);&#10;  };&#10;&#10;  const selectCommandSuggestion = (suggestion) =&gt; {&#10;    setInput(suggestion.command);&#10;    setShowCommandSuggestions(false);&#10;    setCommandSuggestions([]);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex h-screen mx-auto bg-white dark:bg-gray-900 max-h-screen&quot;&gt;&#10;      &lt;Sidebar /&gt;&#10;      &lt;main className=&quot;flex-1 flex flex-col bg-white dark:bg-gray-900&quot;&gt;&#10;        &lt;div className=&quot;flex-1 flex flex-col items-center justify-center px-8 pt-20 pb-8 overflow-y-auto&quot;&gt;&#10;          &lt;div className=&quot;w-20 h-20 rounded-full bg-gradient-to-br from-purple-400 via-pink-400 to-blue-400 mb-8 flex items-center justify-center flex-shrink-0&quot;&gt;&#10;            &lt;div className=&quot;w-16 h-16 rounded-full bg-gradient-to-br from-purple-300 via-pink-300 to-blue-300 opacity-80&quot; /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;h1 className=&quot;text-4xl font-semibold text-gray-800 dark:text-white mb-2&quot;&gt;&#10;            Hi there&#10;          &lt;/h1&gt;&#10;          &lt;h2 className=&quot;text-3xl font-semibold text-gray-800 dark:text-white mb-6&quot;&gt;&#10;            How can I help you today?&#10;          &lt;/h2&gt;&#10;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-300 text-center max-w-md mb-8 leading-relaxed&quot;&gt;&#10;            Choose a persona to customize the AI&amp;apos;s behavior, then start&#10;            your conversation.&#10;          &lt;/p&gt;&#10;&#10;          &lt;div className=&quot;space-y-3 w-full max-w-2xl&quot;&gt;&#10;            {SUGGESTIONS.map((s, i) =&gt; (&#10;              &lt;button&#10;                key={i}&#10;                className=&quot;w-full flex items-center space-x-3 p-4 border border-gray-200 dark:border-gray-700 rounded-xl hover:border-gray-300 dark:hover:border-gray-600 hover:shadow-sm transition-all text-left bg-white dark:bg-gray-800&quot;&#10;                onClick={() =&gt; handleSend(s)}&#10;                disabled={loading}&#10;              &gt;&#10;                &lt;Zap className=&quot;w-5 h-5 text-yellow-500 flex-shrink-0&quot; /&gt;&#10;                &lt;span className=&quot;text-gray-700 dark:text-gray-300&quot;&gt;{s}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;            {loading &amp;&amp; &lt;LoadingSkeleton /&gt;}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;p-6 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800&quot;&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              placeholder=&quot;Ask me Anything or try /help for magic commands&quot;&#10;              className=&quot;w-full p-4 pr-64 border border-gray-300 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800 dark:text-white bg-white dark:bg-gray-700 placeholder-gray-500 dark:placeholder-gray-400&quot;&#10;              value={input}&#10;              onChange={(e) =&gt; handleInputChange(e.target.value)}&#10;              onKeyDown={(e) =&gt; e.key === &quot;Enter&quot; &amp;&amp; handleSubmit()}&#10;              onFocus={handleInputFocus}&#10;              disabled={loading}&#10;              maxLength={1000}&#10;            /&gt;&#10;            {showCommandSuggestions &amp;&amp; (&#10;              &lt;div className=&quot;absolute bottom-full left-0 right-0 mb-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-auto z-50&quot;&gt;&#10;                {commandSuggestions.length === 0 ? (&#10;                  &lt;div className=&quot;p-2 text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                    No command suggestions&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  commandSuggestions.map((suggestion) =&gt; (&#10;                    &lt;div&#10;                      key={suggestion.command}&#10;                      className=&quot;p-3 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors border-b border-gray-100 dark:border-gray-600 last:border-b-0&quot;&#10;                      onClick={() =&gt; selectCommandSuggestion(suggestion)}&#10;                    &gt;&#10;                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;span className=&quot;text-lg&quot;&gt;{suggestion.icon}&lt;/span&gt;&#10;                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                          &lt;div className=&quot;font-medium text-gray-800 dark:text-white&quot;&gt;&#10;                            {suggestion.command}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            {suggestion.description}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;            &lt;div className=&quot;absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2&quot;&gt;&#10;              {imagePreview &amp;&amp; (&#10;                &lt;div className=&quot;relative mr-2&quot;&gt;&#10;                  &lt;img&#10;                    src={imagePreview}&#10;                    alt=&quot;Preview&quot;&#10;                    className=&quot;h-8 w-8 rounded object-cover&quot;&#10;                  /&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; {&#10;                      setImagePreview(null);&#10;                      setSelectedImage(null);&#10;                    }}&#10;                    className=&quot;absolute -top-1 -right-1 bg-red-500 rounded-full p-0.5 text-white&quot;&#10;                    title=&quot;Remove image&quot;&#10;                  &gt;&#10;                    &lt;X size={10} /&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              &lt;PersonaSelector&#10;                selectedPersona={selectedPersona}&#10;                onPersonaChange={(persona) =&gt; setSelectedPersona(persona.id)}&#10;                customPrompt={customPrompt}&#10;                onCustomPromptChange={setCustomPrompt}&#10;                disabled={loading}&#10;              /&gt;&#10;              &lt;button&#10;                onClick={handleUploadClick}&#10;                className=&quot;p-1 text-gray-500 hover:text-gray-700 transition-colors&quot;&#10;                disabled={loading || isUploadingImage}&#10;                title=&quot;Upload image&quot;&#10;              &gt;&#10;                &lt;ImageIcon size={16} /&gt;&#10;              &lt;/button&gt;&#10;              &lt;input&#10;                type=&quot;file&quot;&#10;                ref={fileInputRef}&#10;                onChange={handleUploadImage}&#10;                accept=&quot;image/*&quot;&#10;                className=&quot;hidden&quot;&#10;              /&gt;&#10;              &lt;VoiceInputButton&#10;                isListening={isListening}&#10;                onStartListening={handleVoiceClick}&#10;                onStopListening={stopListening}&#10;                disabled={loading}&#10;              /&gt;&#10;              &lt;select&#10;                className=&quot;p-1 pr-6 border border-gray-300 dark:border-gray-600 rounded-md text-gray-800 dark:text-white bg-white dark:bg-gray-700 text-xs shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-60&quot;&#10;                value={selectedModel}&#10;                onChange={(e) =&gt; setSelectedModel(e.target.value)}&#10;                disabled={models.length === 0}&#10;                style={{ minWidth: &quot;110px&quot; }}&#10;              &gt;&#10;                {models.map((m) =&gt; (&#10;                  &lt;option key={m.name} value={m.name}&gt;&#10;                    {m.displayName || m.name}&#10;                  &lt;/option&gt;&#10;                ))}&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex items-end justify-end mt-3&quot;&gt;&#10;            &lt;div className=&quot;flex items-end space-x-4&quot;&gt;&#10;              &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                {input.length}/1000&#10;              &lt;/span&gt;&#10;              &lt;button&#10;                className=&quot;bg-black dark:bg-white hover:bg-gray-800 dark:hover:bg-gray-200 text-white dark:text-black px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors&quot;&#10;                onClick={() =&gt; handleSubmit()}&#10;                disabled={loading || (!input.trim() &amp;&amp; !imagePreview)}&#10;              &gt;&#10;                &lt;span className=&quot;text-sm&quot;&gt;&#10;                  {loading ? &quot;Sending...&quot; : &quot;Send&quot;}&#10;                &lt;/span&gt;&#10;                &lt;ArrowRight className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          {error &amp;&amp; &lt;div className=&quot;text-red-500 text-sm mt-2&quot;&gt;{error}&lt;/div&gt;}&#10;          {speechError &amp;&amp; (&#10;            &lt;div className=&quot;text-red-500 text-sm mt-2&quot;&gt;{speechError}&lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useRef } from &quot;react&quot;;&#10;import { useAuth } from &quot;@/contexts/AuthContext&quot;;&#10;import LoginForm from &quot;@/components/LoginForm&quot;;&#10;import RegisterForm from &quot;@/components/RegisterForm&quot;;&#10;import { Sidebar } from &quot;@/components/Sidebar&quot;;&#10;import { Zap, ArrowRight, ImageIcon, X } from &quot;lucide-react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useSpeech } from &quot;@/hooks/useSpeech&quot;;&#10;import { VoiceInputButton } from &quot;@/components/SpeechControls&quot;;&#10;import { PersonaSelector } from &quot;@/components/PersonaSelector&quot;;&#10;import { PERSONAS } from &quot;@/lib/personas&quot;;&#10;import {&#10;  isMagicCommand,&#10;  parseMagicCommand,&#10;  executeMagicCommand,&#10;  getMagicCommandSuggestions,&#10;} from &quot;@/lib/magicCommands&quot;;&#10;&#10;const SUGGESTIONS = [&#10;  &quot;Generate a list of creative marketing ideas.&quot;,&#10;  &quot;/help - Show all available magic commands&quot;,&#10;  &quot;/brainstorm marketing ideas for a coffee shop&quot;,&#10;];&#10;&#10;const LoadingSkeleton = () =&gt; (&#10;  &lt;div className=&quot;flex items-center space-x-3 animate-pulse mt-8 w-full max-w-2xl&quot;&gt;&#10;    &lt;div className=&quot;w-8 h-8 rounded-full bg-gradient-to-r from-purple-300 to-pink-300 flex-shrink-0&quot; /&gt;&#10;    &lt;div className=&quot;flex-1&quot;&gt;&#10;      &lt;div className=&quot;rounded-2xl px-4 py-3 max-w-2xl bg-gray-100 h-6 mb-2&quot; /&gt;&#10;      &lt;div className=&quot;rounded-2xl px-4 py-3 max-w-xl bg-gray-100 h-4&quot; /&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;);&#10;&#10;export default function WelcomePage() {&#10;  const [input, setInput] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [models, setModels] = useState([]);&#10;  const [selectedModel, setSelectedModel] = useState(&quot;&quot;);&#10;  const [selectedPersona, setSelectedPersona] = useState(&quot;default&quot;);&#10;  const [customPrompt, setCustomPrompt] = useState(&quot;&quot;);&#10;  const [, setSelectedImage] = useState(null);&#10;  const [imagePreview, setImagePreview] = useState(null);&#10;  const [isUploadingImage, setIsUploadingImage] = useState(false);&#10;  const [showLogin, setShowLogin] = useState(true);&#10;  const [showCommandSuggestions, setShowCommandSuggestions] = useState(false);&#10;  const [commandSuggestions, setCommandSuggestions] = useState([]);&#10;  const fileInputRef = useRef(null);&#10;  const router = useRouter();&#10;&#10;  const { isListening, speechError, startListening, stopListening } =&#10;    useSpeech();&#10;  const { user, loading: authLoading, isAuthenticated } = useAuth();&#10;&#10;  useEffect(() =&gt; {&#10;    fetch(&quot;/api/models&quot;)&#10;      .then((res) =&gt; {&#10;        if (!res.ok) {&#10;          throw new Error(&#10;            `Failed to fetch models: ${res.status} ${res.statusText}`,&#10;          );&#10;        }&#10;        return res.json();&#10;      })&#10;      .then((data) =&gt; {&#10;        setModels(data.models || []);&#10;        if (data.models &amp;&amp; data.models.length &gt; 0) {&#10;          setSelectedModel(data.models[0].name);&#10;        }&#10;      })&#10;      .catch((error) =&gt; {&#10;        setError(&quot;Failed to load models. Please refresh the page.&quot;);&#10;      });&#10;  }, []);&#10;&#10;  if (authLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!isAuthenticated) {&#10;    return showLogin ? (&#10;      &lt;LoginForm onSwitchToRegister={() =&gt; setShowLogin(false)} /&gt;&#10;    ) : (&#10;      &lt;RegisterForm onSwitchToLogin={() =&gt; setShowLogin(true)} /&gt;&#10;    );&#10;  }&#10;&#10;  const getSystemPrompt = () =&gt; {&#10;    if (selectedPersona === &quot;custom&quot;) {&#10;      return customPrompt;&#10;    }&#10;    const persona = PERSONAS.find((p) =&gt; p.id === selectedPersona);&#10;    return persona?.systemPrompt || &quot;&quot;;&#10;  };&#10;&#10;  const handleUploadImage = async (e) =&gt; {&#10;    const file = e.target.files?.[0];&#10;    if (!file) return;&#10;    setIsUploadingImage(true);&#10;    setError(&quot;&quot;);&#10;&#10;    const formData = new FormData();&#10;    formData.append(&quot;image&quot;, file);&#10;&#10;    try {&#10;      const response = await fetch(&quot;/api/upload&quot;, {&#10;        method: &quot;POST&quot;,&#10;        body: formData,&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json();&#10;        throw new Error(errorData.error || &quot;Failed to upload image&quot;);&#10;      }&#10;&#10;      const data = await response.json();&#10;      setImagePreview(data.base64Data);&#10;      setSelectedImage({&#10;        url: data.url,&#10;        base64Data: data.base64Data,&#10;      });&#10;    } catch (e) {&#10;      setError(`Image upload failed: ${e.message}`);&#10;    } finally {&#10;      setIsUploadingImage(false);&#10;    }&#10;  };&#10;&#10;  const handleInputChange = (value) =&gt; {&#10;    setInput(value);&#10;&#10;    if (isMagicCommand(value)) {&#10;      const query = value.slice(1).toLowerCase();&#10;      const suggestions = getMagicCommandSuggestions(query);&#10;      setCommandSuggestions(suggestions);&#10;      setShowCommandSuggestions(suggestions.length &gt; 0);&#10;    } else {&#10;      setShowCommandSuggestions(false);&#10;      setCommandSuggestions([]);&#10;    }&#10;  };&#10;&#10;  const handleMagicCommand = async (commandInput) =&gt; {&#10;    const { command, args, isValid } = parseMagicCommand(commandInput);&#10;&#10;    if (!isValid) {&#10;      setError(&#10;        `Unknown command: ${command}. Type /help to see available commands.`,&#10;      );&#10;      return;&#10;    }&#10;&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;&#10;    try {&#10;      const result = await executeMagicCommand(&#10;        command,&#10;        args,&#10;        [],&#10;        null,&#10;        selectedModel,&#10;      );&#10;&#10;      if (result.success) {&#10;        const res = await fetch(&quot;/api/conversation&quot;, {&#10;          method: &quot;POST&quot;,&#10;          headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;          body: JSON.stringify({&#10;            title: commandInput.slice(0, 40),&#10;            message: commandInput,&#10;            model: selectedModel,&#10;            systemPrompt: getSystemPrompt(),&#10;            magicCommandResult: result.result,&#10;          }),&#10;        });&#10;&#10;        if (!res.ok) {&#10;          throw new Error(&quot;Failed to create conversation&quot;);&#10;        }&#10;&#10;        const data = await res.json();&#10;        router.push(`/conversation/${data.conversation._id}`);&#10;      } else {&#10;        setError(result.error);&#10;      }&#10;    } catch (error) {&#10;      setError(`Command failed: ${error.message}`);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleSend = async (prompt) =&gt; {&#10;    if (!prompt &amp;&amp; !imagePreview) return;&#10;    if (!selectedModel) return;&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    try {&#10;      const res = await fetch(&quot;/api/conversation&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({&#10;          title: prompt?.slice(0, 40) || &quot;Image conversation&quot;,&#10;          message: prompt || &quot;Image attached&quot;,&#10;          model: selectedModel,&#10;          systemPrompt: getSystemPrompt(),&#10;          imageUrl: imagePreview,&#10;        }),&#10;      });&#10;&#10;      if (!res.ok) {&#10;        const errorData = await res.text();&#10;        throw new Error(`Failed to create conversation: ${res.status}`);&#10;      }&#10;&#10;      const data = await res.json();&#10;      if (!data || !data.conversation || !data.conversation._id) {&#10;        throw new Error(&quot;Invalid response from server&quot;);&#10;      }&#10;&#10;      router.push(`/conversation/${data.conversation._id}`);&#10;    } catch (e) {&#10;      setError(`Failed to start chat: ${e.message}`);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleSubmit = async (inputText = null) =&gt; {&#10;    const textToSend = inputText || input;&#10;    if (!textToSend.trim() &amp;&amp; !imagePreview) return;&#10;&#10;    if (isMagicCommand(textToSend)) {&#10;      await handleMagicCommand(textToSend);&#10;    } else {&#10;      await handleSend(textToSend);&#10;    }&#10;  };&#10;&#10;  const handleInputFocus = () =&gt; {};&#10;&#10;  const handleUploadClick = () =&gt; {&#10;    fileInputRef.current?.click();&#10;  };&#10;&#10;  const handleVoiceClick = () =&gt; {&#10;    startListening(handleVoiceInput, true);&#10;  };&#10;&#10;  const handleVoiceInput = (transcript) =&gt; {&#10;    setInput(transcript);&#10;  };&#10;&#10;  const selectCommandSuggestion = (suggestion) =&gt; {&#10;    setInput(suggestion.command);&#10;    setShowCommandSuggestions(false);&#10;    setCommandSuggestions([]);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex h-screen mx-auto bg-white dark:bg-gray-900 max-h-screen&quot;&gt;&#10;      &lt;Sidebar /&gt;&#10;      &lt;main className=&quot;flex-1 flex flex-col bg-white dark:bg-gray-900&quot;&gt;&#10;        &lt;div className=&quot;flex-1 flex flex-col items-center justify-center px-8 pt-20 pb-8 overflow-y-auto&quot;&gt;&#10;          &lt;div className=&quot;w-20 h-20 rounded-full bg-gradient-to-br from-purple-400 via-pink-400 to-blue-400 mb-8 flex items-center justify-center flex-shrink-0&quot;&gt;&#10;            &lt;div className=&quot;w-16 h-16 rounded-full bg-gradient-to-br from-purple-300 via-pink-300 to-blue-300 opacity-80&quot; /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;h1 className=&quot;text-4xl font-semibold text-gray-800 dark:text-white mb-2&quot;&gt;&#10;            Hi there&#10;          &lt;/h1&gt;&#10;          &lt;h2 className=&quot;text-3xl font-semibold text-gray-800 dark:text-white mb-6&quot;&gt;&#10;            How can I help you today?&#10;          &lt;/h2&gt;&#10;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-300 text-center max-w-md mb-8 leading-relaxed&quot;&gt;&#10;            Choose a persona to customize the AI&amp;apos;s behavior, then start&#10;            your conversation.&#10;          &lt;/p&gt;&#10;&#10;          &lt;div className=&quot;space-y-3 w-full max-w-2xl&quot;&gt;&#10;            {SUGGESTIONS.map((s, i) =&gt; (&#10;              &lt;button&#10;                key={i}&#10;                className=&quot;w-full flex items-center space-x-3 p-4 border border-gray-200 dark:border-gray-700 rounded-xl hover:border-gray-300 dark:hover:border-gray-600 hover:shadow-sm transition-all text-left bg-white dark:bg-gray-800&quot;&#10;                onClick={() =&gt; handleSend(s)}&#10;                disabled={loading}&#10;              &gt;&#10;                &lt;Zap className=&quot;w-5 h-5 text-yellow-500 flex-shrink-0&quot; /&gt;&#10;                &lt;span className=&quot;text-gray-700 dark:text-gray-300&quot;&gt;{s}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;            {loading &amp;&amp; &lt;LoadingSkeleton /&gt;}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;p-6 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800&quot;&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              placeholder=&quot;Ask me Anything or try /help for magic commands&quot;&#10;              className=&quot;w-full p-4 pr-64 border border-gray-300 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800 dark:text-white bg-white dark:bg-gray-700 placeholder-gray-500 dark:placeholder-gray-400&quot;&#10;              value={input}&#10;              onChange={(e) =&gt; handleInputChange(e.target.value)}&#10;              onKeyDown={(e) =&gt; e.key === &quot;Enter&quot; &amp;&amp; handleSubmit()}&#10;              onFocus={handleInputFocus}&#10;              disabled={loading}&#10;              maxLength={1000}&#10;            /&gt;&#10;            {showCommandSuggestions &amp;&amp; (&#10;              &lt;div className=&quot;absolute bottom-full left-0 right-0 mb-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-auto z-50&quot;&gt;&#10;                {commandSuggestions.length === 0 ? (&#10;                  &lt;div className=&quot;p-2 text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#10;                    No command suggestions&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  commandSuggestions.map((suggestion) =&gt; (&#10;                    &lt;div&#10;                      key={suggestion.command}&#10;                      className=&quot;p-3 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors border-b border-gray-100 dark:border-gray-600 last:border-b-0&quot;&#10;                      onClick={() =&gt; selectCommandSuggestion(suggestion)}&#10;                    &gt;&#10;                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;span className=&quot;text-lg&quot;&gt;{suggestion.icon}&lt;/span&gt;&#10;                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                          &lt;div className=&quot;font-medium text-gray-800 dark:text-white&quot;&gt;&#10;                            {suggestion.command}&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                            {suggestion.description}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;            &lt;div className=&quot;absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2&quot;&gt;&#10;              {imagePreview &amp;&amp; (&#10;                &lt;div className=&quot;relative mr-2&quot;&gt;&#10;                  &lt;img&#10;                    src={imagePreview}&#10;                    alt=&quot;Preview&quot;&#10;                    className=&quot;h-8 w-8 rounded object-cover&quot;&#10;                  /&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; {&#10;                      setImagePreview(null);&#10;                      setSelectedImage(null);&#10;                    }}&#10;                    className=&quot;absolute -top-1 -right-1 bg-red-500 rounded-full p-0.5 text-white&quot;&#10;                    title=&quot;Remove image&quot;&#10;                  &gt;&#10;                    &lt;X size={10} /&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              &lt;PersonaSelector&#10;                selectedPersona={selectedPersona}&#10;                onPersonaChange={(persona) =&gt; setSelectedPersona(persona.id)}&#10;                customPrompt={customPrompt}&#10;                onCustomPromptChange={setCustomPrompt}&#10;                disabled={loading}&#10;              /&gt;&#10;              &lt;button&#10;                onClick={handleUploadClick}&#10;                className=&quot;p-1 text-gray-500 hover:text-gray-700 transition-colors&quot;&#10;                disabled={loading || isUploadingImage}&#10;                title=&quot;Upload image&quot;&#10;              &gt;&#10;                &lt;ImageIcon size={16} /&gt;&#10;              &lt;/button&gt;&#10;              &lt;input&#10;                type=&quot;file&quot;&#10;                ref={fileInputRef}&#10;                onChange={handleUploadImage}&#10;                accept=&quot;image/*&quot;&#10;                className=&quot;hidden&quot;&#10;              /&gt;&#10;              &lt;VoiceInputButton&#10;                isListening={isListening}&#10;                onStartListening={handleVoiceClick}&#10;                onStopListening={stopListening}&#10;                disabled={loading}&#10;              /&gt;&#10;              &lt;select&#10;                className=&quot;p-1 pr-6 border border-gray-300 dark:border-gray-600 rounded-md text-gray-800 dark:text-white bg-white dark:bg-gray-700 text-xs shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-60&quot;&#10;                value={selectedModel}&#10;                onChange={(e) =&gt; setSelectedModel(e.target.value)}&#10;                disabled={models.length === 0}&#10;                style={{ minWidth: &quot;110px&quot; }}&#10;              &gt;&#10;                {models.map((m) =&gt; (&#10;                  &lt;option key={m.name} value={m.name}&gt;&#10;                    {m.displayName || m.name}&#10;                  &lt;/option&gt;&#10;                ))}&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex items-end justify-end mt-3&quot;&gt;&#10;            &lt;div className=&quot;flex items-end space-x-4&quot;&gt;&#10;              &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;                {input.length}/1000&#10;              &lt;/span&gt;&#10;              &lt;button&#10;                className=&quot;bg-black dark:bg-gray-700 hover:bg-gray-800 dark:hover:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors&quot;&#10;                onClick={() =&gt; handleSubmit()}&#10;                disabled={loading || (!input.trim() &amp;&amp; !imagePreview)}&#10;              &gt;&#10;                &lt;span className=&quot;text-sm&quot;&gt;&#10;                  {loading ? &quot;Sending...&quot; : &quot;Send&quot;}&#10;                &lt;/span&gt;&#10;                &lt;ArrowRight className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          {error &amp;&amp; &lt;div className=&quot;text-red-500 text-sm mt-2&quot;&gt;{error}&lt;/div&gt;}&#10;          {speechError &amp;&amp; (&#10;            &lt;div className=&quot;text-red-500 text-sm mt-2&quot;&gt;{speechError}&lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/AnalyticsDashboard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/AnalyticsDashboard.js" />
              <option name="originalContent" value="import React from &quot;react&quot;;&#10;import {&#10;  BarChart3,&#10;  MessageCircle,&#10;  Bot,&#10;  Clock,&#10;  Zap,&#10;  TrendingUp,&#10;  Calendar,&#10;  User,&#10;} from &quot;lucide-react&quot;;&#10;&#10;export function AnalyticsDashboard({&#10;  analytics,&#10;  timeRange,&#10;  onTimeRangeChange,&#10;}) {&#10;  if (!analytics) {&#10;    return (&#10;      &lt;div className=&quot;p-6 animate-pulse bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800&quot;&gt;&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6&quot;&gt;&#10;          {[1, 2, 3, 4].map((i) =&gt; (&#10;            &lt;div&#10;              key={i}&#10;              className=&quot;bg-white dark:bg-gray-800 h-24 rounded-xl shadow-sm border dark:border-gray-700&quot;&#10;            &gt;&lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const {&#10;    overview,&#10;    dailyActivity,&#10;    modelUsage,&#10;    personaUsage,&#10;    messageTypes,&#10;    peakTimes,&#10;    averageResponseLength,&#10;    magicCommandsUsage,&#10;  } = analytics;&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;      &lt;div className=&quot;p-6 space-y-6&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h1 className=&quot;text-4xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent&quot;&gt;&#10;              Usage Analytics&#10;            &lt;/h1&gt;&#10;            &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-2 text-lg&quot;&gt;&#10;              Track your AI conversation patterns and insights&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;select&#10;            value={timeRange}&#10;            onChange={(e) =&gt; onTimeRangeChange(e.target.value)}&#10;            className=&quot;px-6 py-3 border-2 border-purple-200 dark:border-purple-800 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-800 shadow-sm text-gray-800 dark:text-white font-medium&quot;&#10;          &gt;&#10;            &lt;option value=&quot;7&quot;&gt;Last 7 days&lt;/option&gt;&#10;            &lt;option value=&quot;30&quot;&gt;Last 30 days&lt;/option&gt;&#10;            &lt;option value=&quot;90&quot;&gt;Last 90 days&lt;/option&gt;&#10;            &lt;option value=&quot;365&quot;&gt;Last year&lt;/option&gt;&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Overview Cards */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;          &lt;StatCard&#10;            icon={&lt;MessageCircle className=&quot;w-7 h-7&quot; /&gt;}&#10;            title=&quot;Total Conversations&quot;&#10;            value={overview.totalConversations}&#10;            subtitle={`${overview.averageMessagesPerConversation} avg messages`}&#10;            gradient=&quot;from-blue-500 to-cyan-500&quot;&#10;            bgGradient=&quot;from-blue-50 to-cyan-50&quot;&#10;            borderColor=&quot;border-blue-200&quot;&#10;          /&gt;&#10;          &lt;StatCard&#10;            icon={&lt;Bot className=&quot;w-7 h-7&quot; /&gt;}&#10;            title=&quot;Total Messages&quot;&#10;            value={overview.totalMessages}&#10;            subtitle={`${Math.round(overview.totalCharacters / 1000)}k characters`}&#10;            gradient=&quot;from-purple-500 to-pink-500&quot;&#10;            bgGradient=&quot;from-purple-50 to-pink-50&quot;&#10;            borderColor=&quot;border-purple-200&quot;&#10;          /&gt;&#10;          &lt;StatCard&#10;            icon={&lt;TrendingUp className=&quot;w-7 h-7&quot; /&gt;}&#10;            title=&quot;Avg Response Length&quot;&#10;            value={averageResponseLength}&#10;            subtitle=&quot;characters&quot;&#10;            gradient=&quot;from-green-500 to-emerald-500&quot;&#10;            bgGradient=&quot;from-green-50 to-emerald-50&quot;&#10;            borderColor=&quot;border-green-200&quot;&#10;          /&gt;&#10;          &lt;StatCard&#10;            icon={&lt;Zap className=&quot;w-7 h-7&quot; /&gt;}&#10;            title=&quot;Magic Commands&quot;&#10;            value={magicCommandsUsage.reduce((sum, cmd) =&gt; sum + cmd.count, 0)}&#10;            subtitle={`${magicCommandsUsage.length} unique commands`}&#10;            gradient=&quot;from-yellow-500 to-orange-500&quot;&#10;            bgGradient=&quot;from-yellow-50 to-orange-50&quot;&#10;            borderColor=&quot;border-yellow-200&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Charts Grid */}&#10;        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;          {/* Daily Activity Chart */}&#10;          &lt;ChartCard&#10;            title=&quot;Daily Activity&quot;&#10;            icon={&lt;Calendar className=&quot;w-6 h-6 text-blue-600&quot; /&gt;}&#10;            gradient=&quot;from-blue-500 to-indigo-500&quot;&#10;          &gt;&#10;            &lt;DailyActivityChart data={dailyActivity} /&gt;&#10;          &lt;/ChartCard&gt;&#10;&#10;          {/* Peak Times Chart */}&#10;          &lt;ChartCard&#10;            title=&quot;Peak Usage Hours&quot;&#10;            icon={&lt;Clock className=&quot;w-6 h-6 text-purple-600&quot; /&gt;}&#10;            gradient=&quot;from-purple-500 to-pink-500&quot;&#10;          &gt;&#10;            &lt;PeakTimesChart data={peakTimes} /&gt;&#10;          &lt;/ChartCard&gt;&#10;&#10;          {/* Model Usage */}&#10;          &lt;ChartCard&#10;            title=&quot;Model Usage&quot;&#10;            icon={&lt;Bot className=&quot;w-6 h-6 text-green-600&quot; /&gt;}&#10;            gradient=&quot;from-green-500 to-teal-500&quot;&#10;          &gt;&#10;            &lt;UsageList data={modelUsage} type=&quot;model&quot; colorScheme=&quot;green&quot; /&gt;&#10;          &lt;/ChartCard&gt;&#10;&#10;          {/* Persona Usage */}&#10;          &lt;ChartCard&#10;            title=&quot;Persona Usage&quot;&#10;            icon={&lt;User className=&quot;w-6 h-6 text-indigo-600&quot; /&gt;}&#10;            gradient=&quot;from-indigo-500 to-blue-500&quot;&#10;          &gt;&#10;            &lt;UsageList&#10;              data={personaUsage}&#10;              type=&quot;persona&quot;&#10;              colorScheme=&quot;indigo&quot;&#10;            /&gt;&#10;          &lt;/ChartCard&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Magic Commands Usage */}&#10;        {magicCommandsUsage.length &gt; 0 &amp;&amp; (&#10;          &lt;ChartCard&#10;            title=&quot;Magic Commands Usage&quot;&#10;            icon={&lt;Zap className=&quot;w-6 h-6 text-yellow-600&quot; /&gt;}&#10;            gradient=&quot;from-yellow-500 to-orange-500&quot;&#10;          &gt;&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {magicCommandsUsage.map(({ command, count }) =&gt; (&#10;                &lt;div&#10;                  key={command}&#10;                  className=&quot;flex justify-between items-center p-3 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/30 dark:to-orange-900/30 rounded-lg border border-yellow-200 dark:border-yellow-800&quot;&#10;                &gt;&#10;                  &lt;span className=&quot;font-mono text-sm bg-gradient-to-r from-yellow-600 to-orange-600 text-white px-3 py-1 rounded-full font-medium&quot;&gt;&#10;                    {command}&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-800 dark:text-white font-semibold&quot;&gt;&#10;                    {count} times&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/ChartCard&gt;&#10;        )}&#10;&#10;        {/* Message Types Breakdown */}&#10;        &lt;ChartCard&#10;          title=&quot;Message Distribution&quot;&#10;          icon={&lt;MessageCircle className=&quot;w-6 h-6 text-cyan-600&quot; /&gt;}&#10;          gradient=&quot;from-cyan-500 to-blue-500&quot;&#10;        &gt;&#10;          &lt;div className=&quot;grid grid-cols-3 gap-6 text-center&quot;&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/30 rounded-xl border border-blue-200 dark:border-blue-800&quot;&gt;&#10;              &lt;div className=&quot;text-3xl font-bold text-blue-600 dark:text-blue-400 mb-1&quot;&gt;&#10;                {messageTypes.user}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                Your Messages&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/30 dark:to-purple-800/30 rounded-xl border border-purple-200 dark:border-purple-800&quot;&gt;&#10;              &lt;div className=&quot;text-3xl font-bold text-purple-600 dark:text-purple-400 mb-1&quot;&gt;&#10;                {messageTypes.assistant}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                AI Responses&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700 rounded-xl border border-gray-200 dark:border-gray-600&quot;&gt;&#10;              &lt;div className=&quot;text-3xl font-bold text-gray-700 dark:text-gray-300 mb-1&quot;&gt;&#10;                {messageTypes.total}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                Total Messages&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/ChartCard&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function StatCard({&#10;  icon,&#10;  title,&#10;  value,&#10;  subtitle,&#10;  gradient,&#10;  bgGradient,&#10;  borderColor,&#10;}) {&#10;  return (&#10;    &lt;div&#10;      className={`bg-gradient-to-br ${bgGradient} dark:from-gray-800 dark:to-gray-700 p-6 rounded-xl border-2 ${borderColor} dark:border-gray-600 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1`}&#10;    &gt;&#10;      &lt;div&#10;        className={`inline-flex p-3 rounded-xl bg-gradient-to-r ${gradient} text-white mb-4 shadow-md`}&#10;      &gt;&#10;        {icon}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-3xl font-bold text-gray-800 dark:text-white mb-2&quot;&gt;&#10;        {typeof value === &quot;number&quot; ? value.toLocaleString() : value}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;        {title}&#10;      &lt;/div&gt;&#10;      {subtitle &amp;&amp; (&#10;        &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;          {subtitle}&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function ChartCard({ title, icon, children, gradient }) {&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 p-6 rounded-xl border-2 border-gray-200 dark:border-gray-700 shadow-lg hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;        &lt;div&#10;          className={`p-2 rounded-lg bg-gradient-to-r ${gradient} text-white shadow-md`}&#10;        &gt;&#10;          {icon}&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-xl font-bold text-gray-800 dark:text-white&quot;&gt;&#10;          {title}&#10;        &lt;/h3&gt;&#10;      &lt;/div&gt;&#10;      {children}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function DailyActivityChart({ data }) {&#10;  if (!data || data.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-center py-8 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;        No activity data available&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const maxMessages = Math.max(...data.map((d) =&gt; d.messages));&#10;  const maxConversations = Math.max(...data.map((d) =&gt; d.conversations));&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-4&quot;&gt;&#10;      {data.slice(-7).map((day, index) =&gt; (&#10;        &lt;div key={day.date} className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;w-20 text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;            {new Date(day.date).toLocaleDateString(&quot;en-US&quot;, {&#10;              weekday: &quot;short&quot;,&#10;              month: &quot;short&quot;,&#10;              day: &quot;numeric&quot;,&#10;            })}&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex-1 flex space-x-4&quot;&gt;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;&#10;                &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                  Messages&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-blue-600 dark:text-blue-400 font-bold&quot;&gt;&#10;                  {day.messages}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;bg-gray-200 dark:bg-gray-600 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                &lt;div&#10;                  className=&quot;bg-gradient-to-r from-blue-500 to-cyan-500 h-3 rounded-full transition-all duration-500 shadow-sm&quot;&#10;                  style={{&#10;                    width: `${maxMessages &gt; 0 ? (day.messages / maxMessages) * 100 : 0}%`,&#10;                  }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;&#10;                &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                  Conversations&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-purple-600 dark:text-purple-400 font-bold&quot;&gt;&#10;                  {day.conversations}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;bg-gray-200 dark:bg-gray-600 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                &lt;div&#10;                  className=&quot;bg-gradient-to-r from-purple-500 to-pink-500 h-3 rounded-full transition-all duration-500 shadow-sm&quot;&#10;                  style={{&#10;                    width: `${maxConversations &gt; 0 ? (day.conversations / maxConversations) * 100 : 0}%`,&#10;                  }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function PeakTimesChart({ data }) {&#10;  if (!data || data.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-gray-600 text-center py-8 bg-gray-50 rounded-lg&quot;&gt;&#10;        No timing data available&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Group hours into time periods for better visualization&#10;  const timeGroups = {&#10;    &quot;Morning (6-11)&quot;: {&#10;      hours: [6, 7, 8, 9, 10, 11],&#10;      color: &quot;#3B82F6&quot;,&#10;      gradient: &quot;from-blue-400 to-blue-600&quot;,&#10;    },&#10;    &quot;Afternoon (12-17)&quot;: {&#10;      hours: [12, 13, 14, 15, 16, 17],&#10;      color: &quot;#10B981&quot;,&#10;      gradient: &quot;from-green-400 to-green-600&quot;,&#10;    },&#10;    &quot;Evening (18-23)&quot;: {&#10;      hours: [18, 19, 20, 21, 22, 23],&#10;      color: &quot;#8B5CF6&quot;,&#10;      gradient: &quot;from-purple-400 to-purple-600&quot;,&#10;    },&#10;    &quot;Night (0-5)&quot;: {&#10;      hours: [0, 1, 2, 3, 4, 5],&#10;      color: &quot;#F59E0B&quot;,&#10;      gradient: &quot;from-yellow-400 to-orange-500&quot;,&#10;    },&#10;  };&#10;&#10;  // Calculate total messages for each time group&#10;  const groupData = Object.entries(timeGroups)&#10;    .map(([name, group]) =&gt; {&#10;      const total = group.hours.reduce((sum, hour) =&gt; {&#10;        const hourData = data.find((d) =&gt; d.hour === hour);&#10;        return sum + (hourData ? hourData.count : 0);&#10;      }, 0);&#10;      return { name, total, ...group };&#10;    })&#10;    .filter((group) =&gt; group.total &gt; 0);&#10;&#10;  const totalMessages = groupData.reduce((sum, group) =&gt; sum + group.total, 0);&#10;&#10;  if (totalMessages === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-gray-600 text-center py-8 bg-gray-50 rounded-lg&quot;&gt;&#10;        No usage data available&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Calculate pie chart segments&#10;  let cumulativePercentage = 0;&#10;  const segments = groupData.map((group, index) =&gt; {&#10;    const percentage = (group.total / totalMessages) * 100;&#10;    const startAngle = cumulativePercentage * 3.6; // Convert to degrees&#10;    const endAngle = (cumulativePercentage + percentage) * 3.6;&#10;    cumulativePercentage += percentage;&#10;&#10;    return {&#10;      ...group,&#10;      percentage,&#10;      startAngle,&#10;      endAngle,&#10;      pathData: createArcPath(120, 120, 80, startAngle, endAngle),&#10;      index,&#10;    };&#10;  });&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6&quot;&gt;&#10;      {/* Pie Chart */}&#10;      &lt;div className=&quot;flex justify-center&quot;&gt;&#10;        &lt;div className=&quot;relative&quot;&gt;&#10;          &lt;svg width=&quot;280&quot; height=&quot;280&quot; className=&quot;transform -rotate-90&quot;&gt;&#10;            {/* Gradient definitions - moved to the top */}&#10;            &lt;defs&gt;&#10;              {segments.map((segment, index) =&gt; (&#10;                &lt;linearGradient&#10;                  key={`gradient-${index}`}&#10;                  id={`gradient-${index}`}&#10;                  x1=&quot;0%&quot;&#10;                  y1=&quot;0%&quot;&#10;                  x2=&quot;100%&quot;&#10;                  y2=&quot;100%&quot;&#10;                &gt;&#10;                  &lt;stop&#10;                    offset=&quot;0%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;0.9&quot;&#10;                  /&gt;&#10;                  &lt;stop&#10;                    offset=&quot;50%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;1&quot;&#10;                  /&gt;&#10;                  &lt;stop&#10;                    offset=&quot;100%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;0.8&quot;&#10;                  /&gt;&#10;                &lt;/linearGradient&gt;&#10;              ))}&#10;              {/* Radial gradient for better effect */}&#10;              {segments.map((segment, index) =&gt; (&#10;                &lt;radialGradient&#10;                  key={`radial-${index}`}&#10;                  id={`radial-${index}`}&#10;                  cx=&quot;50%&quot;&#10;                  cy=&quot;50%&quot;&#10;                  r=&quot;50%&quot;&#10;                &gt;&#10;                  &lt;stop&#10;                    offset=&quot;0%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;0.9&quot;&#10;                  /&gt;&#10;                  &lt;stop&#10;                    offset=&quot;100%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;0.7&quot;&#10;                  /&gt;&#10;                &lt;/radialGradient&gt;&#10;              ))}&#10;            &lt;/defs&gt;&#10;&#10;            {/* Background circle */}&#10;            &lt;circle&#10;              cx=&quot;140&quot;&#10;              cy=&quot;140&quot;&#10;              r=&quot;90&quot;&#10;              fill=&quot;none&quot;&#10;              stroke=&quot;#f3f4f6&quot;&#10;              strokeWidth=&quot;6&quot;&#10;            /&gt;&#10;&#10;            {/* Pie segments */}&#10;            {segments.map((segment, index) =&gt; (&#10;              &lt;g key={segment.name}&gt;&#10;                {/* Shadow segment */}&#10;                &lt;path&#10;                  d={createArcPath(&#10;                    142,&#10;                    142,&#10;                    88,&#10;                    segment.startAngle,&#10;                    segment.endAngle,&#10;                  )}&#10;                  fill=&quot;rgba(0,0,0,0.1)&quot;&#10;                  stroke=&quot;none&quot;&#10;                /&gt;&#10;                {/* Main segment */}&#10;                &lt;path&#10;                  d={createArcPath(&#10;                    140,&#10;                    140,&#10;                    88,&#10;                    segment.startAngle,&#10;                    segment.endAngle,&#10;                  )}&#10;                  fill={segment.color}&#10;                  stroke=&quot;white&quot;&#10;                  strokeWidth=&quot;3&quot;&#10;                  className=&quot;hover:opacity-80 transition-all duration-300 cursor-pointer transform hover:scale-105&quot;&#10;                  style={{&#10;                    filter: &quot;drop-shadow(0 4px 8px rgba(0, 0, 0, 0.15))&quot;,&#10;                    transformOrigin: &quot;140px 140px&quot;,&#10;                  }}&#10;                /&gt;&#10;                {/* Highlight overlay */}&#10;                &lt;path&#10;                  d={createArcPath(&#10;                    140,&#10;                    140,&#10;                    88,&#10;                    segment.startAngle,&#10;                    segment.endAngle,&#10;                  )}&#10;                  fill={`url(#radial-${index})`}&#10;                  stroke=&quot;none&quot;&#10;                  className=&quot;pointer-events-none&quot;&#10;                /&gt;&#10;              &lt;/g&gt;&#10;            ))}&#10;&#10;            {/* Center circle with gradient */}&#10;            &lt;defs&gt;&#10;              &lt;radialGradient id=&quot;centerGradient&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;50%&quot;&gt;&#10;                &lt;stop offset=&quot;0%&quot; stopColor=&quot;white&quot; stopOpacity=&quot;1&quot; /&gt;&#10;                &lt;stop offset=&quot;100%&quot; stopColor=&quot;#f8fafc&quot; stopOpacity=&quot;1&quot; /&gt;&#10;              &lt;/radialGradient&gt;&#10;            &lt;/defs&gt;&#10;            &lt;circle&#10;              cx=&quot;140&quot;&#10;              cy=&quot;140&quot;&#10;              r=&quot;45&quot;&#10;              fill=&quot;url(#centerGradient)&quot;&#10;              stroke=&quot;#e2e8f0&quot;&#10;              strokeWidth=&quot;3&quot;&#10;              className=&quot;drop-shadow-lg&quot;&#10;            /&gt;&#10;&#10;            {/* Center text */}&#10;            &lt;text&#10;              x=&quot;140&quot;&#10;              y=&quot;135&quot;&#10;              textAnchor=&quot;middle&quot;&#10;              className=&quot;fill-gray-700 text-lg font-bold transform rotate-90&quot;&#10;              style={{ transformOrigin: &quot;140px 140px&quot; }}&#10;            &gt;&#10;              Total&#10;            &lt;/text&gt;&#10;            &lt;text&#10;              x=&quot;140&quot;&#10;              y=&quot;155&quot;&#10;              textAnchor=&quot;middle&quot;&#10;              className=&quot;fill-gray-600 text-sm font-semibold transform rotate-90&quot;&#10;              style={{ transformOrigin: &quot;140px 140px&quot; }}&#10;            &gt;&#10;              {totalMessages}&#10;            &lt;/text&gt;&#10;          &lt;/svg&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Legend with enhanced styling */}&#10;      &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;        {segments.map((segment, index) =&gt; (&#10;          &lt;div&#10;            key={segment.name}&#10;            className=&quot;flex items-center space-x-3 p-4 bg-gradient-to-r from-white to-gray-50 rounded-xl border-2 border-gray-200 shadow-md hover:shadow-lg transition-all duration-300 hover:-translate-y-1&quot;&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              &lt;div&#10;                className=&quot;w-6 h-6 rounded-full shadow-md border-2 border-white&quot;&#10;                style={{ backgroundColor: segment.color }}&#10;              /&gt;&#10;              &lt;div className=&quot;flex-1&quot;&gt;&#10;                &lt;div className=&quot;text-sm font-bold text-gray-800&quot;&gt;&#10;                  {segment.name}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-xs text-gray-600 font-medium&quot;&gt;&#10;                  {segment.total} messages ({segment.percentage.toFixed(1)}%)&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Enhanced hourly breakdown */}&#10;      &lt;div className=&quot;mt-8&quot;&gt;&#10;        &lt;h4 className=&quot;text-lg font-bold text-gray-800 mb-4 flex items-center&quot;&gt;&#10;          &lt;Clock className=&quot;w-5 h-5 mr-2 text-purple-600&quot; /&gt;&#10;          Detailed Hourly Breakdown&#10;        &lt;/h4&gt;&#10;        &lt;div className=&quot;bg-white p-4 rounded-xl border border-gray-200 shadow-sm&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-12 gap-2&quot;&gt;&#10;            {Array.from({ length: 24 }, (_, hour) =&gt; {&#10;              const hourData = data.find((d) =&gt; d.hour === hour) || {&#10;                hour,&#10;                count: 0,&#10;              };&#10;              const maxCount = Math.max(...data.map((d) =&gt; d.count));&#10;              const height =&#10;                maxCount &gt; 0 ? (hourData.count / maxCount) * 100 : 0;&#10;              const isActiveHour = hourData.count &gt; 0;&#10;&#10;              // Determine time group color&#10;              let colorClass = &quot;bg-gray-300&quot;;&#10;              let glowClass = &quot;&quot;;&#10;              if (timeGroups[&quot;Morning (6-11)&quot;].hours.includes(hour)) {&#10;                colorClass = &quot;bg-gradient-to-t from-blue-400 to-blue-500&quot;;&#10;                glowClass = &quot;shadow-blue-400/50&quot;;&#10;              } else if (timeGroups[&quot;Afternoon (12-17)&quot;].hours.includes(hour)) {&#10;                colorClass = &quot;bg-gradient-to-t from-green-400 to-green-500&quot;;&#10;                glowClass = &quot;shadow-green-400/50&quot;;&#10;              } else if (timeGroups[&quot;Evening (18-23)&quot;].hours.includes(hour)) {&#10;                colorClass = &quot;bg-gradient-to-t from-purple-400 to-purple-500&quot;;&#10;                glowClass = &quot;shadow-purple-400/50&quot;;&#10;              } else if (timeGroups[&quot;Night (0-5)&quot;].hours.includes(hour)) {&#10;                colorClass = &quot;bg-gradient-to-t from-yellow-400 to-orange-500&quot;;&#10;                glowClass = &quot;shadow-orange-400/50&quot;;&#10;              }&#10;&#10;              return (&#10;                &lt;div key={hour} className=&quot;flex flex-col items-center group&quot;&gt;&#10;                  &lt;div className=&quot;h-16 w-full flex items-end mb-2&quot;&gt;&#10;                    &lt;div&#10;                      className={`w-full rounded-t-lg transition-all duration-500 ${&#10;                        isActiveHour&#10;                          ? `${colorClass} shadow-lg ${glowClass} border border-white/20`&#10;                          : &quot;bg-gray-200&quot;&#10;                      } group-hover:scale-110 group-hover:shadow-xl`}&#10;                      style={{ height: `${Math.max(height, 10)}%` }}&#10;                      title={`${hour}:00 - ${hourData.count} messages`}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-700 font-semibold&quot;&gt;&#10;                    {hour % 4 === 0 ? `${hour}h` : &quot;&quot;}&#10;                  &lt;/div&gt;&#10;                  {isActiveHour &amp;&amp; (&#10;                    &lt;div className=&quot;text-xs text-gray-600 font-medium mt-1&quot;&gt;&#10;                      {hourData.count}&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function UsageList({ data, type, colorScheme }) {&#10;  if (!data || data.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-center py-8 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;        No {type} data available&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const total = data.reduce((sum, item) =&gt; sum + item.count, 0);&#10;&#10;  const colorSchemes = {&#10;    green: &quot;from-green-500 to-emerald-500&quot;,&#10;    indigo: &quot;from-indigo-500 to-blue-500&quot;,&#10;    purple: &quot;from-purple-500 to-pink-500&quot;,&#10;    blue: &quot;from-blue-500 to-cyan-500&quot;,&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-4&quot;&gt;&#10;      {data.slice(0, 5).map((item, index) =&gt; {&#10;        const percentage = total &gt; 0 ? (item.count / total) * 100 : 0;&#10;        const label = item[type] || item.model || item.persona;&#10;&#10;        return (&#10;          &lt;div key={label} className=&quot;space-y-2&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;              &lt;span className=&quot;font-semibold text-gray-800 dark:text-white&quot;&gt;{label}&lt;/span&gt;&#10;              &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-bold&quot;&gt;{item.count}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;bg-gray-200 dark:bg-gray-600 rounded-full h-3 overflow-hidden&quot;&gt;&#10;              &lt;div&#10;                className={`bg-gradient-to-r ${colorSchemes[colorScheme]} h-3 rounded-full transition-all duration-500 shadow-sm`}&#10;                style={{ width: `${percentage}%` }}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;              {percentage.toFixed(1)}% of total&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        );&#10;      })}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;// Helper function to create SVG arc path&#10;function createArcPath(centerX, centerY, radius, startAngle, endAngle) {&#10;  const start = polarToCartesian(centerX, centerY, radius, endAngle);&#10;  const end = polarToCartesian(centerX, centerY, radius, startAngle);&#10;  const largeArcFlag = endAngle - startAngle &lt;= 180 ? &quot;0&quot; : &quot;1&quot;;&#10;&#10;  return [&#10;    &quot;M&quot;,&#10;    centerX,&#10;    centerY,&#10;    &quot;L&quot;,&#10;    start.x,&#10;    start.y,&#10;    &quot;A&quot;,&#10;    radius,&#10;    radius,&#10;    0,&#10;    largeArcFlag,&#10;    0,&#10;    end.x,&#10;    end.y,&#10;    &quot;Z&quot;,&#10;  ].join(&quot; &quot;);&#10;}&#10;&#10;function polarToCartesian(centerX, centerY, radius, angleInDegrees) {&#10;  const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;&#10;  return {&#10;    x: centerX + radius * Math.cos(angleInRadians),&#10;    y: centerY + radius * Math.sin(angleInRadians),&#10;  };&#10;}&#10;" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import {&#10;  BarChart3,&#10;  MessageCircle,&#10;  Bot,&#10;  Clock,&#10;  Zap,&#10;  TrendingUp,&#10;  Calendar,&#10;  User,&#10;} from &quot;lucide-react&quot;;&#10;&#10;export function AnalyticsDashboard({&#10;  analytics,&#10;  timeRange,&#10;  onTimeRangeChange,&#10;}) {&#10;  if (!analytics) {&#10;    return (&#10;      &lt;div className=&quot;p-6 animate-pulse bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800&quot;&gt;&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6&quot;&gt;&#10;          {[1, 2, 3, 4].map((i) =&gt; (&#10;            &lt;div&#10;              key={i}&#10;              className=&quot;bg-white dark:bg-gray-800 h-24 rounded-xl shadow-sm border dark:border-gray-700&quot;&#10;            &gt;&lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const {&#10;    overview,&#10;    dailyActivity,&#10;    modelUsage,&#10;    personaUsage,&#10;    messageTypes,&#10;    peakTimes,&#10;    averageResponseLength,&#10;    magicCommandsUsage,&#10;  } = analytics;&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900&quot;&gt;&#10;      &lt;div className=&quot;p-6 space-y-6&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;h1 className=&quot;text-4xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent&quot;&gt;&#10;              Usage Analytics&#10;            &lt;/h1&gt;&#10;            &lt;p className=&quot;text-gray-700 dark:text-gray-300 mt-2 text-lg&quot;&gt;&#10;              Track your AI conversation patterns and insights&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;select&#10;            value={timeRange}&#10;            onChange={(e) =&gt; onTimeRangeChange(e.target.value)}&#10;            className=&quot;px-6 py-3 border-2 border-purple-200 dark:border-purple-800 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-800 shadow-sm text-gray-800 dark:text-white font-medium&quot;&#10;          &gt;&#10;            &lt;option value=&quot;7&quot;&gt;Last 7 days&lt;/option&gt;&#10;            &lt;option value=&quot;30&quot;&gt;Last 30 days&lt;/option&gt;&#10;            &lt;option value=&quot;90&quot;&gt;Last 90 days&lt;/option&gt;&#10;            &lt;option value=&quot;365&quot;&gt;Last year&lt;/option&gt;&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Overview Cards */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;          &lt;StatCard&#10;            icon={&lt;MessageCircle className=&quot;w-7 h-7&quot; /&gt;}&#10;            title=&quot;Total Conversations&quot;&#10;            value={overview.totalConversations}&#10;            subtitle={`${overview.averageMessagesPerConversation} avg messages`}&#10;            gradient=&quot;from-blue-500 to-cyan-500&quot;&#10;            bgGradient=&quot;from-blue-50 to-cyan-50&quot;&#10;            borderColor=&quot;border-blue-200&quot;&#10;          /&gt;&#10;          &lt;StatCard&#10;            icon={&lt;Bot className=&quot;w-7 h-7&quot; /&gt;}&#10;            title=&quot;Total Messages&quot;&#10;            value={overview.totalMessages}&#10;            subtitle={`${Math.round(overview.totalCharacters / 1000)}k characters`}&#10;            gradient=&quot;from-purple-500 to-pink-500&quot;&#10;            bgGradient=&quot;from-purple-50 to-pink-50&quot;&#10;            borderColor=&quot;border-purple-200&quot;&#10;          /&gt;&#10;          &lt;StatCard&#10;            icon={&lt;TrendingUp className=&quot;w-7 h-7&quot; /&gt;}&#10;            title=&quot;Avg Response Length&quot;&#10;            value={averageResponseLength}&#10;            subtitle=&quot;characters&quot;&#10;            gradient=&quot;from-green-500 to-emerald-500&quot;&#10;            bgGradient=&quot;from-green-50 to-emerald-50&quot;&#10;            borderColor=&quot;border-green-200&quot;&#10;          /&gt;&#10;          &lt;StatCard&#10;            icon={&lt;Zap className=&quot;w-7 h-7&quot; /&gt;}&#10;            title=&quot;Magic Commands&quot;&#10;            value={magicCommandsUsage.reduce((sum, cmd) =&gt; sum + cmd.count, 0)}&#10;            subtitle={`${magicCommandsUsage.length} unique commands`}&#10;            gradient=&quot;from-yellow-500 to-orange-500&quot;&#10;            bgGradient=&quot;from-yellow-50 to-orange-50&quot;&#10;            borderColor=&quot;border-yellow-200&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Charts Grid */}&#10;        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;          {/* Daily Activity Chart */}&#10;          &lt;ChartCard&#10;            title=&quot;Daily Activity&quot;&#10;            icon={&lt;Calendar className=&quot;w-6 h-6 text-blue-600&quot; /&gt;}&#10;            gradient=&quot;from-blue-500 to-indigo-500&quot;&#10;          &gt;&#10;            &lt;DailyActivityChart data={dailyActivity} /&gt;&#10;          &lt;/ChartCard&gt;&#10;&#10;          {/* Peak Times Chart */}&#10;          &lt;ChartCard&#10;            title=&quot;Peak Usage Hours&quot;&#10;            icon={&lt;Clock className=&quot;w-6 h-6 text-purple-600&quot; /&gt;}&#10;            gradient=&quot;from-purple-500 to-pink-500&quot;&#10;          &gt;&#10;            &lt;PeakTimesChart data={peakTimes} /&gt;&#10;          &lt;/ChartCard&gt;&#10;&#10;          {/* Model Usage */}&#10;          &lt;ChartCard&#10;            title=&quot;Model Usage&quot;&#10;            icon={&lt;Bot className=&quot;w-6 h-6 text-green-600&quot; /&gt;}&#10;            gradient=&quot;from-green-500 to-teal-500&quot;&#10;          &gt;&#10;            &lt;UsageList data={modelUsage} type=&quot;model&quot; colorScheme=&quot;green&quot; /&gt;&#10;          &lt;/ChartCard&gt;&#10;&#10;          {/* Persona Usage */}&#10;          &lt;ChartCard&#10;            title=&quot;Persona Usage&quot;&#10;            icon={&lt;User className=&quot;w-6 h-6 text-indigo-600&quot; /&gt;}&#10;            gradient=&quot;from-indigo-500 to-blue-500&quot;&#10;          &gt;&#10;            &lt;UsageList&#10;              data={personaUsage}&#10;              type=&quot;persona&quot;&#10;              colorScheme=&quot;indigo&quot;&#10;            /&gt;&#10;          &lt;/ChartCard&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Magic Commands Usage */}&#10;        {magicCommandsUsage.length &gt; 0 &amp;&amp; (&#10;          &lt;ChartCard&#10;            title=&quot;Magic Commands Usage&quot;&#10;            icon={&lt;Zap className=&quot;w-6 h-6 text-yellow-600&quot; /&gt;}&#10;            gradient=&quot;from-yellow-500 to-orange-500&quot;&#10;          &gt;&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {magicCommandsUsage.map(({ command, count }) =&gt; (&#10;                &lt;div&#10;                  key={command}&#10;                  className=&quot;flex justify-between items-center p-3 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/30 dark:to-orange-900/30 rounded-lg border border-yellow-200 dark:border-yellow-800&quot;&#10;                &gt;&#10;                  &lt;span className=&quot;font-mono text-sm bg-gradient-to-r from-yellow-600 to-orange-600 text-white px-3 py-1 rounded-full font-medium&quot;&gt;&#10;                    {command}&#10;                  &lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-800 dark:text-white font-semibold&quot;&gt;&#10;                    {count} times&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/ChartCard&gt;&#10;        )}&#10;&#10;        {/* Message Types Breakdown */}&#10;        &lt;ChartCard&#10;          title=&quot;Message Distribution&quot;&#10;          icon={&lt;MessageCircle className=&quot;w-6 h-6 text-cyan-600&quot; /&gt;}&#10;          gradient=&quot;from-cyan-500 to-blue-500&quot;&#10;        &gt;&#10;          &lt;div className=&quot;grid grid-cols-3 gap-6 text-center&quot;&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/30 rounded-xl border border-blue-200 dark:border-blue-800&quot;&gt;&#10;              &lt;div className=&quot;text-3xl font-bold text-blue-600 dark:text-blue-400 mb-1&quot;&gt;&#10;                {messageTypes.user}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                Your Messages&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/30 dark:to-purple-800/30 rounded-xl border border-purple-200 dark:border-purple-800&quot;&gt;&#10;              &lt;div className=&quot;text-3xl font-bold text-purple-600 dark:text-purple-400 mb-1&quot;&gt;&#10;                {messageTypes.assistant}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                AI Responses&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700 rounded-xl border border-gray-200 dark:border-gray-600&quot;&gt;&#10;              &lt;div className=&quot;text-3xl font-bold text-gray-700 dark:text-gray-300 mb-1&quot;&gt;&#10;                {messageTypes.total}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                Total Messages&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/ChartCard&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function StatCard({&#10;  icon,&#10;  title,&#10;  value,&#10;  subtitle,&#10;  gradient,&#10;  bgGradient,&#10;  borderColor,&#10;}) {&#10;  return (&#10;    &lt;div&#10;      className={`bg-gradient-to-br ${bgGradient} dark:from-gray-800 dark:to-gray-700 p-6 rounded-xl border-2 ${borderColor} dark:border-gray-600 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1`}&#10;    &gt;&#10;      &lt;div&#10;        className={`inline-flex p-3 rounded-xl bg-gradient-to-r ${gradient} text-white mb-4 shadow-md`}&#10;      &gt;&#10;        {icon}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-3xl font-bold text-gray-800 dark:text-white mb-2&quot;&gt;&#10;        {typeof value === &quot;number&quot; ? value.toLocaleString() : value}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;        {title}&#10;      &lt;/div&gt;&#10;      {subtitle &amp;&amp; (&#10;        &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400 mt-1&quot;&gt;&#10;          {subtitle}&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function ChartCard({ title, icon, children, gradient }) {&#10;  return (&#10;    &lt;div className=&quot;bg-white dark:bg-gray-800 p-6 rounded-xl border-2 border-gray-200 dark:border-gray-700 shadow-lg hover:shadow-xl transition-all duration-300&quot;&gt;&#10;      &lt;div className=&quot;flex items-center space-x-3 mb-6&quot;&gt;&#10;        &lt;div&#10;          className={`p-2 rounded-lg bg-gradient-to-r ${gradient} text-white shadow-md`}&#10;        &gt;&#10;          {icon}&#10;        &lt;/div&gt;&#10;        &lt;h3 className=&quot;text-xl font-bold text-gray-800 dark:text-white&quot;&gt;&#10;          {title}&#10;        &lt;/h3&gt;&#10;      &lt;/div&gt;&#10;      {children}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function DailyActivityChart({ data }) {&#10;  if (!data || data.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-center py-8 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;        No activity data available&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const maxMessages = Math.max(...data.map((d) =&gt; d.messages));&#10;  const maxConversations = Math.max(...data.map((d) =&gt; d.conversations));&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-4&quot;&gt;&#10;      {data.slice(-7).map((day, index) =&gt; (&#10;        &lt;div key={day.date} className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;w-20 text-sm text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;            {new Date(day.date).toLocaleDateString(&quot;en-US&quot;, {&#10;              weekday: &quot;short&quot;,&#10;              month: &quot;short&quot;,&#10;              day: &quot;numeric&quot;,&#10;            })}&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex-1 flex space-x-4&quot;&gt;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;&#10;                &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                  Messages&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-blue-600 dark:text-blue-400 font-bold&quot;&gt;&#10;                  {day.messages}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;bg-gray-200 dark:bg-gray-600 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                &lt;div&#10;                  className=&quot;bg-gradient-to-r from-blue-500 to-cyan-500 h-3 rounded-full transition-all duration-500 shadow-sm&quot;&#10;                  style={{&#10;                    width: `${maxMessages &gt; 0 ? (day.messages / maxMessages) * 100 : 0}%`,&#10;                  }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;&#10;                &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-medium&quot;&gt;&#10;                  Conversations&#10;                &lt;/span&gt;&#10;                &lt;span className=&quot;text-purple-600 dark:text-purple-400 font-bold&quot;&gt;&#10;                  {day.conversations}&#10;                &lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;bg-gray-200 dark:bg-gray-600 rounded-full h-3 overflow-hidden&quot;&gt;&#10;                &lt;div&#10;                  className=&quot;bg-gradient-to-r from-purple-500 to-pink-500 h-3 rounded-full transition-all duration-500 shadow-sm&quot;&#10;                  style={{&#10;                    width: `${maxConversations &gt; 0 ? (day.conversations / maxConversations) * 100 : 0}%`,&#10;                  }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function PeakTimesChart({ data }) {&#10;  if (!data || data.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-center py-8 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;        No timing data available&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Group hours into time periods for better visualization&#10;  const timeGroups = {&#10;    &quot;Morning (6-11)&quot;: {&#10;      hours: [6, 7, 8, 9, 10, 11],&#10;      color: &quot;#3B82F6&quot;,&#10;      gradient: &quot;from-blue-400 to-blue-600&quot;,&#10;    },&#10;    &quot;Afternoon (12-17)&quot;: {&#10;      hours: [12, 13, 14, 15, 16, 17],&#10;      color: &quot;#10B981&quot;,&#10;      gradient: &quot;from-green-400 to-green-600&quot;,&#10;    },&#10;    &quot;Evening (18-23)&quot;: {&#10;      hours: [18, 19, 20, 21, 22, 23],&#10;      color: &quot;#8B5CF6&quot;,&#10;      gradient: &quot;from-purple-400 to-purple-600&quot;,&#10;    },&#10;    &quot;Night (0-5)&quot;: {&#10;      hours: [0, 1, 2, 3, 4, 5],&#10;      color: &quot;#F59E0B&quot;,&#10;      gradient: &quot;from-yellow-400 to-orange-500&quot;,&#10;    },&#10;  };&#10;&#10;  // Calculate total messages for each time group&#10;  const groupData = Object.entries(timeGroups)&#10;    .map(([name, group]) =&gt; {&#10;      const total = group.hours.reduce((sum, hour) =&gt; {&#10;        const hourData = data.find((d) =&gt; d.hour === hour);&#10;        return sum + (hourData ? hourData.count : 0);&#10;      }, 0);&#10;      return { name, total, ...group };&#10;    })&#10;    .filter((group) =&gt; group.total &gt; 0);&#10;&#10;  const totalMessages = groupData.reduce((sum, group) =&gt; sum + group.total, 0);&#10;&#10;  if (totalMessages === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-center py-8 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;        No usage data available&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Calculate pie chart segments&#10;  let cumulativePercentage = 0;&#10;  const segments = groupData.map((group, index) =&gt; {&#10;    const percentage = (group.total / totalMessages) * 100;&#10;    const startAngle = cumulativePercentage * 3.6; // Convert to degrees&#10;    const endAngle = (cumulativePercentage + percentage) * 3.6;&#10;    cumulativePercentage += percentage;&#10;&#10;    return {&#10;      ...group,&#10;      percentage,&#10;      startAngle,&#10;      endAngle,&#10;      pathData: createArcPath(120, 120, 80, startAngle, endAngle),&#10;      index,&#10;    };&#10;  });&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6&quot;&gt;&#10;      {/* Pie Chart */}&#10;      &lt;div className=&quot;flex justify-center&quot;&gt;&#10;        &lt;div className=&quot;relative&quot;&gt;&#10;          &lt;svg width=&quot;280&quot; height=&quot;280&quot; className=&quot;transform -rotate-90&quot;&gt;&#10;            {/* Gradient definitions - moved to the top */}&#10;            &lt;defs&gt;&#10;              {segments.map((segment, index) =&gt; (&#10;                &lt;linearGradient&#10;                  key={`gradient-${index}`}&#10;                  id={`gradient-${index}`}&#10;                  x1=&quot;0%&quot;&#10;                  y1=&quot;0%&quot;&#10;                  x2=&quot;100%&quot;&#10;                  y2=&quot;100%&quot;&#10;                &gt;&#10;                  &lt;stop&#10;                    offset=&quot;0%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;0.9&quot;&#10;                  /&gt;&#10;                  &lt;stop&#10;                    offset=&quot;50%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;1&quot;&#10;                  /&gt;&#10;                  &lt;stop&#10;                    offset=&quot;100%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;0.8&quot;&#10;                  /&gt;&#10;                &lt;/linearGradient&gt;&#10;              ))}&#10;              {/* Radial gradient for better effect */}&#10;              {segments.map((segment, index) =&gt; (&#10;                &lt;radialGradient&#10;                  key={`radial-${index}`}&#10;                  id={`radial-${index}`}&#10;                  cx=&quot;50%&quot;&#10;                  cy=&quot;50%&quot;&#10;                  r=&quot;50%&quot;&#10;                &gt;&#10;                  &lt;stop&#10;                    offset=&quot;0%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;0.9&quot;&#10;                  /&gt;&#10;                  &lt;stop&#10;                    offset=&quot;100%&quot;&#10;                    stopColor={segment.color}&#10;                    stopOpacity=&quot;0.7&quot;&#10;                  /&gt;&#10;                &lt;/radialGradient&gt;&#10;              ))}&#10;              {/* Center circle gradient for dark mode */}&#10;              &lt;radialGradient id=&quot;centerGradient&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;50%&quot;&gt;&#10;                &lt;stop offset=&quot;0%&quot; stopColor=&quot;white&quot; stopOpacity=&quot;1&quot; /&gt;&#10;                &lt;stop offset=&quot;100%&quot; stopColor=&quot;#f8fafc&quot; stopOpacity=&quot;1&quot; /&gt;&#10;              &lt;/radialGradient&gt;&#10;              &lt;radialGradient id=&quot;centerGradientDark&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;50%&quot;&gt;&#10;                &lt;stop offset=&quot;0%&quot; stopColor=&quot;#374151&quot; stopOpacity=&quot;1&quot; /&gt;&#10;                &lt;stop offset=&quot;100%&quot; stopColor=&quot;#1f2937&quot; stopOpacity=&quot;1&quot; /&gt;&#10;              &lt;/radialGradient&gt;&#10;            &lt;/defs&gt;&#10;&#10;            {/* Background circle */}&#10;            &lt;circle&#10;              cx=&quot;140&quot;&#10;              cy=&quot;140&quot;&#10;              r=&quot;90&quot;&#10;              fill=&quot;none&quot;&#10;              stroke=&quot;#f3f4f6&quot;&#10;              strokeWidth=&quot;6&quot;&#10;              className=&quot;dark:stroke-gray-600&quot;&#10;            /&gt;&#10;&#10;            {/* Pie segments */}&#10;            {segments.map((segment, index) =&gt; (&#10;              &lt;g key={segment.name}&gt;&#10;                {/* Shadow segment */}&#10;                &lt;path&#10;                  d={createArcPath(&#10;                    142,&#10;                    142,&#10;                    88,&#10;                    segment.startAngle,&#10;                    segment.endAngle,&#10;                  )}&#10;                  fill=&quot;rgba(0,0,0,0.1)&quot;&#10;                  stroke=&quot;none&quot;&#10;                /&gt;&#10;                {/* Main segment */}&#10;                &lt;path&#10;                  d={createArcPath(&#10;                    140,&#10;                    140,&#10;                    88,&#10;                    segment.startAngle,&#10;                    segment.endAngle,&#10;                  )}&#10;                  fill={segment.color}&#10;                  stroke=&quot;white&quot;&#10;                  strokeWidth=&quot;3&quot;&#10;                  className=&quot;hover:opacity-80 transition-all duration-300 cursor-pointer transform hover:scale-105 dark:stroke-gray-800&quot;&#10;                  style={{&#10;                    filter: &quot;drop-shadow(0 4px 8px rgba(0, 0, 0, 0.15))&quot;,&#10;                    transformOrigin: &quot;140px 140px&quot;,&#10;                  }}&#10;                /&gt;&#10;                {/* Highlight overlay */}&#10;                &lt;path&#10;                  d={createArcPath(&#10;                    140,&#10;                    140,&#10;                    88,&#10;                    segment.startAngle,&#10;                    segment.endAngle,&#10;                  )}&#10;                  fill={`url(#radial-${index})`}&#10;                  stroke=&quot;none&quot;&#10;                  className=&quot;pointer-events-none&quot;&#10;                /&gt;&#10;              &lt;/g&gt;&#10;            ))}&#10;&#10;            {/* Center circle with gradient */}&#10;            &lt;circle&#10;              cx=&quot;140&quot;&#10;              cy=&quot;140&quot;&#10;              r=&quot;45&quot;&#10;              fill=&quot;url(#centerGradient)&quot;&#10;              stroke=&quot;#e2e8f0&quot;&#10;              strokeWidth=&quot;3&quot;&#10;              className=&quot;drop-shadow-lg dark:fill-[url(#centerGradientDark)] dark:stroke-gray-600&quot;&#10;            /&gt;&#10;&#10;            {/* Center text */}&#10;            &lt;text&#10;              x=&quot;140&quot;&#10;              y=&quot;135&quot;&#10;              textAnchor=&quot;middle&quot;&#10;              className=&quot;fill-gray-700 dark:fill-gray-300 text-lg font-bold transform rotate-90&quot;&#10;              style={{ transformOrigin: &quot;140px 140px&quot; }}&#10;            &gt;&#10;              Total&#10;            &lt;/text&gt;&#10;            &lt;text&#10;              x=&quot;140&quot;&#10;              y=&quot;155&quot;&#10;              textAnchor=&quot;middle&quot;&#10;              className=&quot;fill-gray-600 dark:fill-gray-400 text-sm font-semibold transform rotate-90&quot;&#10;              style={{ transformOrigin: &quot;140px 140px&quot; }}&#10;            &gt;&#10;              {totalMessages}&#10;            &lt;/text&gt;&#10;          &lt;/svg&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Legend with enhanced styling */}&#10;      &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;        {segments.map((segment, index) =&gt; (&#10;          &lt;div&#10;            key={segment.name}&#10;            className=&quot;flex items-center space-x-3 p-4 bg-gradient-to-r from-white to-gray-50 dark:from-gray-800 dark:to-gray-700 rounded-xl border-2 border-gray-200 dark:border-gray-600 shadow-md hover:shadow-lg transition-all duration-300 hover:-translate-y-1&quot;&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              &lt;div&#10;                className=&quot;w-6 h-6 rounded-full shadow-md border-2 border-white dark:border-gray-600&quot;&#10;                style={{ backgroundColor: segment.color }}&#10;              /&gt;&#10;              &lt;div className=&quot;flex-1&quot;&gt;&#10;                &lt;div className=&quot;text-sm font-bold text-gray-800 dark:text-white&quot;&gt;&#10;                  {segment.name}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400 font-medium&quot;&gt;&#10;                  {segment.total} messages ({segment.percentage.toFixed(1)}%)&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Enhanced hourly breakdown */}&#10;      &lt;div className=&quot;mt-8&quot;&gt;&#10;        &lt;h4 className=&quot;text-lg font-bold text-gray-800 dark:text-white mb-4 flex items-center&quot;&gt;&#10;          &lt;Clock className=&quot;w-5 h-5 mr-2 text-purple-600 dark:text-purple-400&quot; /&gt;&#10;          Detailed Hourly Breakdown&#10;        &lt;/h4&gt;&#10;        &lt;div className=&quot;bg-white dark:bg-gray-800 p-4 rounded-xl border border-gray-200 dark:border-gray-600 shadow-sm&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-12 gap-2&quot;&gt;&#10;            {Array.from({ length: 24 }, (_, hour) =&gt; {&#10;              const hourData = data.find((d) =&gt; d.hour === hour) || {&#10;                hour,&#10;                count: 0,&#10;              };&#10;              const maxCount = Math.max(...data.map((d) =&gt; d.count));&#10;              const height =&#10;                maxCount &gt; 0 ? (hourData.count / maxCount) * 100 : 0;&#10;              const isActiveHour = hourData.count &gt; 0;&#10;&#10;              // Determine time group color&#10;              let colorClass = &quot;bg-gray-300 dark:bg-gray-600&quot;;&#10;              let glowClass = &quot;&quot;;&#10;              if (timeGroups[&quot;Morning (6-11)&quot;].hours.includes(hour)) {&#10;                colorClass = &quot;bg-gradient-to-t from-blue-400 to-blue-500&quot;;&#10;                glowClass = &quot;shadow-blue-400/50&quot;;&#10;              } else if (timeGroups[&quot;Afternoon (12-17)&quot;].hours.includes(hour)) {&#10;                colorClass = &quot;bg-gradient-to-t from-green-400 to-green-500&quot;;&#10;                glowClass = &quot;shadow-green-400/50&quot;;&#10;              } else if (timeGroups[&quot;Evening (18-23)&quot;].hours.includes(hour)) {&#10;                colorClass = &quot;bg-gradient-to-t from-purple-400 to-purple-500&quot;;&#10;                glowClass = &quot;shadow-purple-400/50&quot;;&#10;              } else if (timeGroups[&quot;Night (0-5)&quot;].hours.includes(hour)) {&#10;                colorClass = &quot;bg-gradient-to-t from-yellow-400 to-orange-500&quot;;&#10;                glowClass = &quot;shadow-orange-400/50&quot;;&#10;              }&#10;&#10;              return (&#10;                &lt;div key={hour} className=&quot;flex flex-col items-center group&quot;&gt;&#10;                  &lt;div className=&quot;h-16 w-full flex items-end mb-2&quot;&gt;&#10;                    &lt;div&#10;                      className={`w-full rounded-t-lg transition-all duration-500 ${&#10;                        isActiveHour&#10;                          ? `${colorClass} shadow-lg ${glowClass} border border-white/20 dark:border-gray-700/20`&#10;                          : &quot;bg-gray-200 dark:bg-gray-600&quot;&#10;                      } group-hover:scale-110 group-hover:shadow-xl`}&#10;                      style={{ height: `${Math.max(height, 10)}%` }}&#10;                      title={`${hour}:00 - ${hourData.count} messages`}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-700 dark:text-gray-300 font-semibold&quot;&gt;&#10;                    {hour % 4 === 0 ? `${hour}h` : &quot;&quot;}&#10;                  &lt;/div&gt;&#10;                  {isActiveHour &amp;&amp; (&#10;                    &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400 font-medium mt-1&quot;&gt;&#10;                      {hourData.count}&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function UsageList({ data, type, colorScheme }) {&#10;  if (!data || data.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-gray-600 dark:text-gray-400 text-center py-8 bg-gray-50 dark:bg-gray-700 rounded-lg&quot;&gt;&#10;        No {type} data available&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const total = data.reduce((sum, item) =&gt; sum + item.count, 0);&#10;&#10;  const colorSchemes = {&#10;    green: &quot;from-green-500 to-emerald-500&quot;,&#10;    indigo: &quot;from-indigo-500 to-blue-500&quot;,&#10;    purple: &quot;from-purple-500 to-pink-500&quot;,&#10;    blue: &quot;from-blue-500 to-cyan-500&quot;,&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-4&quot;&gt;&#10;      {data.slice(0, 5).map((item, index) =&gt; {&#10;        const percentage = total &gt; 0 ? (item.count / total) * 100 : 0;&#10;        const label = item[type] || item.model || item.persona;&#10;&#10;        return (&#10;          &lt;div key={label} className=&quot;space-y-2&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;              &lt;span className=&quot;font-semibold text-gray-800 dark:text-white&quot;&gt;{label}&lt;/span&gt;&#10;              &lt;span className=&quot;text-gray-700 dark:text-gray-300 font-bold&quot;&gt;{item.count}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;bg-gray-200 dark:bg-gray-600 rounded-full h-3 overflow-hidden&quot;&gt;&#10;              &lt;div&#10;                className={`bg-gradient-to-r ${colorSchemes[colorScheme]} h-3 rounded-full transition-all duration-500 shadow-sm`}&#10;                style={{ width: `${percentage}%` }}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-xs text-gray-600 dark:text-gray-400&quot;&gt;&#10;              {percentage.toFixed(1)}% of total&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        );&#10;      })}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;// Helper function to create SVG arc path&#10;function createArcPath(centerX, centerY, radius, startAngle, endAngle) {&#10;  const start = polarToCartesian(centerX, centerY, radius, endAngle);&#10;  const end = polarToCartesian(centerX, centerY, radius, startAngle);&#10;  const largeArcFlag = endAngle - startAngle &lt;= 180 ? &quot;0&quot; : &quot;1&quot;;&#10;&#10;  return [&#10;    &quot;M&quot;,&#10;    centerX,&#10;    centerY,&#10;    &quot;L&quot;,&#10;    start.x,&#10;    start.y,&#10;    &quot;A&quot;,&#10;    radius,&#10;    radius,&#10;    0,&#10;    largeArcFlag,&#10;    0,&#10;    end.x,&#10;    end.y,&#10;    &quot;Z&quot;,&#10;  ].join(&quot; &quot;);&#10;}&#10;&#10;function polarToCartesian(centerX, centerY, radius, angleInDegrees) {&#10;  const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;&#10;  return {&#10;    x: centerX + radius * Math.cos(angleInRadians),&#10;    y: centerY + radius * Math.sin(angleInRadians),&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ConversationInput.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ConversationInput.js" />
              <option name="originalContent" value="import { useState, useRef } from &quot;react&quot;;&#10;import { X, ImageIcon, ArrowRight } from &quot;lucide-react&quot;;&#10;import { VoiceInputButton } from &quot;@/components/SpeechControls&quot;;&#10;import { PersonaSelector } from &quot;@/components/PersonaSelector&quot;;&#10;&#10;export const ConversationInput = ({&#10;  input,&#10;  setInput,&#10;  onSubmit,&#10;  onInputChange,&#10;  onVoiceInput,&#10;  onImageUpload,&#10;  imagePreview,&#10;  onRemoveImage,&#10;  selectedPersona,&#10;  onPersonaChange,&#10;  customPrompt,&#10;  onCustomPromptChange,&#10;  models,&#10;  selectedModel,&#10;  onModelChange,&#10;  loading,&#10;  isUploadingImage,&#10;  isListening,&#10;  startListening,&#10;  stopListening,&#10;  showCommandSuggestions,&#10;  commandSuggestions,&#10;  onSelectCommandSuggestion,&#10;  speechError,&#10;  error,&#10;}) =&gt; {&#10;  const fileInputRef = useRef(null);&#10;&#10;  return (&#10;    &lt;footer className=&quot;p-6 border-t border-gray-200&quot;&gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        &lt;input&#10;          type=&quot;text&quot;&#10;          placeholder=&quot;Ask me Anything&quot;&#10;          className=&quot;w-full p-4 pr-64 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-800&quot;&#10;          value={input}&#10;          onChange={(e) =&gt; onInputChange(e.target.value)}&#10;          onKeyDown={(e) =&gt; {&#10;            if (e.key === &quot;Enter&quot;) {&#10;              onSubmit();&#10;            }&#10;          }}&#10;          disabled={loading}&#10;          maxLength={1000}&#10;        /&gt;&#10;&#10;        {/* Magic Commands Dropdown */}&#10;        {showCommandSuggestions &amp;&amp; (&#10;          &lt;div className=&quot;absolute bottom-full left-0 right-0 mb-2 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto z-50&quot;&gt;&#10;            {commandSuggestions.length === 0 ? (&#10;              &lt;div className=&quot;p-2 text-gray-500 text-sm&quot;&gt;&#10;                No command suggestions&#10;              &lt;/div&gt;&#10;            ) : (&#10;              commandSuggestions.map((suggestion) =&gt; (&#10;                &lt;div&#10;                  key={suggestion.command}&#10;                  className=&quot;p-3 cursor-pointer hover:bg-gray-100 transition-colors border-b border-gray-100 last:border-b-0&quot;&#10;                  onClick={() =&gt; onSelectCommandSuggestion(suggestion)}&#10;                &gt;&#10;                  &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;{suggestion.icon}&lt;/span&gt;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                      &lt;div className=&quot;font-medium text-gray-800&quot;&gt;&#10;                        {suggestion.command}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#10;                        {suggestion.description}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;div className=&quot;absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2&quot;&gt;&#10;          {imagePreview &amp;&amp; (&#10;            &lt;div className=&quot;relative mr-2&quot;&gt;&#10;              &lt;img&#10;                src={imagePreview}&#10;                alt=&quot;Preview&quot;&#10;                className=&quot;h-8 w-8 rounded object-cover&quot;&#10;              /&gt;&#10;              &lt;button&#10;                onClick={onRemoveImage}&#10;                className=&quot;absolute -top-1 -right-1 bg-red-500 rounded-full p-0.5 text-white&quot;&#10;                title=&quot;Remove image&quot;&#10;              &gt;&#10;                &lt;X size={10} /&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          &lt;PersonaSelector&#10;            selectedPersona={selectedPersona}&#10;            onPersonaChange={onPersonaChange}&#10;            customPrompt={customPrompt}&#10;            onCustomPromptChange={onCustomPromptChange}&#10;            disabled={loading}&#10;          /&gt;&#10;          &lt;VoiceInputButton&#10;            isListening={isListening}&#10;            onStartListening={() =&gt; startListening(onVoiceInput, true)}&#10;            onStopListening={stopListening}&#10;            disabled={loading}&#10;          /&gt;&#10;          &lt;button&#10;            onClick={() =&gt; fileInputRef.current?.click()}&#10;            className=&quot;p-1 text-gray-500 hover:text-gray-700 transition-colors&quot;&#10;            disabled={loading || isUploadingImage}&#10;            title=&quot;Upload image&quot;&#10;          &gt;&#10;            &lt;ImageIcon size={16} /&gt;&#10;          &lt;/button&gt;&#10;          &lt;input&#10;            type=&quot;file&quot;&#10;            ref={fileInputRef}&#10;            onChange={onImageUpload}&#10;            accept=&quot;image/*&quot;&#10;            className=&quot;hidden&quot;&#10;          /&gt;&#10;          &lt;select&#10;            className=&quot;p-1 pr-6 border border-gray-300 rounded-md text-gray-800 bg-white text-xs shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-60&quot;&#10;            value={selectedModel}&#10;            onChange={onModelChange}&#10;            disabled={models.length === 0}&#10;            style={{ minWidth: &quot;110px&quot; }}&#10;          &gt;&#10;            {models.map((m) =&gt; (&#10;              &lt;option key={m.name} value={m.name}&gt;&#10;                {m.displayName || m.name}&#10;              &lt;/option&gt;&#10;            ))}&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex items-center justify-end mt-3&quot;&gt;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;span className=&quot;text-sm text-gray-500&quot;&gt;{input.length}/1000&lt;/span&gt;&#10;          &lt;button&#10;            className=&quot;bg-black hover:bg-gray-800 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors&quot;&#10;            onClick={onSubmit}&#10;            disabled={loading || (!input.trim() &amp;&amp; !imagePreview)}&#10;          &gt;&#10;            &lt;span className=&quot;text-sm&quot;&gt;{loading ? &quot;Sending...&quot; : &quot;Send&quot;}&lt;/span&gt;&#10;            &lt;ArrowRight className=&quot;w-4 h-4&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {error &amp;&amp; &lt;div className=&quot;text-red-500 text-sm mt-2&quot;&gt;{error}&lt;/div&gt;}&#10;      {speechError &amp;&amp; (&#10;        &lt;div className=&quot;text-red-500 text-sm mt-2&quot;&gt;{speechError}&lt;/div&gt;&#10;      )}&#10;    &lt;/footer&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import { useState, useRef } from &quot;react&quot;;&#13;&#10;import { X, ImageIcon, ArrowRight } from &quot;lucide-react&quot;;&#13;&#10;import { VoiceInputButton } from &quot;@/components/SpeechControls&quot;;&#13;&#10;import { PersonaSelector } from &quot;@/components/PersonaSelector&quot;;&#13;&#10;&#13;&#10;export const ConversationInput = ({&#13;&#10;  input,&#13;&#10;  setInput,&#13;&#10;  onSubmit,&#13;&#10;  onInputChange,&#13;&#10;  onVoiceInput,&#13;&#10;  onImageUpload,&#13;&#10;  imagePreview,&#13;&#10;  onRemoveImage,&#13;&#10;  selectedPersona,&#13;&#10;  onPersonaChange,&#13;&#10;  customPrompt,&#13;&#10;  onCustomPromptChange,&#13;&#10;  models,&#13;&#10;  selectedModel,&#13;&#10;  onModelChange,&#13;&#10;  loading,&#13;&#10;  isUploadingImage,&#13;&#10;  isListening,&#13;&#10;  startListening,&#13;&#10;  stopListening,&#13;&#10;  showCommandSuggestions,&#13;&#10;  commandSuggestions,&#13;&#10;  onSelectCommandSuggestion,&#13;&#10;  speechError,&#13;&#10;  error,&#13;&#10;}) =&gt; {&#13;&#10;  const fileInputRef = useRef(null);&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;footer className=&quot;p-6 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900&quot;&gt;&#13;&#10;      &lt;div className=&quot;relative&quot;&gt;&#13;&#10;        &lt;input&#13;&#10;          type=&quot;text&quot;&#13;&#10;          placeholder=&quot;Ask me Anything&quot;&#13;&#10;          className=&quot;w-full p-4 pr-64 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-800 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#13;&#10;          value={input}&#13;&#10;          onChange={(e) =&gt; onInputChange(e.target.value)}&#13;&#10;          onKeyDown={(e) =&gt; {&#13;&#10;            if (e.key === &quot;Enter&quot;) {&#13;&#10;              onSubmit();&#13;&#10;            }&#13;&#10;          }}&#13;&#10;          disabled={loading}&#13;&#10;          maxLength={1000}&#13;&#10;        /&gt;&#13;&#10;&#13;&#10;        {/* Magic Commands Dropdown */}&#13;&#10;        {showCommandSuggestions &amp;&amp; (&#13;&#10;          &lt;div className=&quot;absolute bottom-full left-0 right-0 mb-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-auto z-50&quot;&gt;&#13;&#10;            {commandSuggestions.length === 0 ? (&#13;&#10;              &lt;div className=&quot;p-2 text-gray-500 dark:text-gray-400 text-sm&quot;&gt;&#13;&#10;                No command suggestions&#13;&#10;              &lt;/div&gt;&#13;&#10;            ) : (&#13;&#10;              commandSuggestions.map((suggestion) =&gt; (&#13;&#10;                &lt;div&#13;&#10;                  key={suggestion.command}&#13;&#10;                  className=&quot;p-3 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors border-b border-gray-100 dark:border-gray-600 last:border-b-0&quot;&#13;&#10;                  onClick={() =&gt; onSelectCommandSuggestion(suggestion)}&#13;&#10;                &gt;&#13;&#10;                  &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;{suggestion.icon}&lt;/span&gt;&#13;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;                      &lt;div className=&quot;font-medium text-gray-800 dark:text-white&quot;&gt;&#13;&#10;                        {suggestion.command}&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;                        {suggestion.description}&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              ))&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;        )}&#13;&#10;&#13;&#10;        &lt;div className=&quot;absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2&quot;&gt;&#13;&#10;          {imagePreview &amp;&amp; (&#13;&#10;            &lt;div className=&quot;relative mr-2&quot;&gt;&#13;&#10;              &lt;img&#13;&#10;                src={imagePreview}&#13;&#10;                alt=&quot;Preview&quot;&#13;&#10;                className=&quot;h-8 w-8 rounded object-cover&quot;&#13;&#10;              /&gt;&#13;&#10;              &lt;button&#13;&#10;                onClick={onRemoveImage}&#13;&#10;                className=&quot;absolute -top-1 -right-1 bg-red-500 rounded-full p-0.5 text-white&quot;&#13;&#10;                title=&quot;Remove image&quot;&#13;&#10;              &gt;&#13;&#10;                &lt;X size={10} /&gt;&#13;&#10;              &lt;/button&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;          &lt;PersonaSelector&#13;&#10;            selectedPersona={selectedPersona}&#13;&#10;            onPersonaChange={onPersonaChange}&#13;&#10;            customPrompt={customPrompt}&#13;&#10;            onCustomPromptChange={onCustomPromptChange}&#13;&#10;            disabled={loading}&#13;&#10;          /&gt;&#13;&#10;          &lt;VoiceInputButton&#13;&#10;            isListening={isListening}&#13;&#10;            onStartListening={() =&gt; startListening(onVoiceInput, true)}&#13;&#10;            onStopListening={stopListening}&#13;&#10;            disabled={loading}&#13;&#10;          /&gt;&#13;&#10;          &lt;button&#13;&#10;            onClick={() =&gt; fileInputRef.current?.click()}&#13;&#10;            className=&quot;p-1 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors&quot;&#13;&#10;            disabled={loading || isUploadingImage}&#13;&#10;            title=&quot;Upload image&quot;&#13;&#10;          &gt;&#13;&#10;            &lt;ImageIcon size={16} /&gt;&#13;&#10;          &lt;/button&gt;&#13;&#10;          &lt;input&#13;&#10;            type=&quot;file&quot;&#13;&#10;            ref={fileInputRef}&#13;&#10;            onChange={onImageUpload}&#13;&#10;            accept=&quot;image/*&quot;&#13;&#10;            className=&quot;hidden&quot;&#13;&#10;          /&gt;&#13;&#10;          &lt;select&#13;&#10;            className=&quot;p-1 pr-6 border border-gray-300 dark:border-gray-600 rounded-md text-gray-800 dark:text-white bg-white dark:bg-gray-800 text-xs shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-60&quot;&#13;&#10;            value={selectedModel}&#13;&#10;            onChange={onModelChange}&#13;&#10;            disabled={models.length === 0}&#13;&#10;            style={{ minWidth: &quot;110px&quot; }}&#13;&#10;          &gt;&#13;&#10;            {models.map((m) =&gt; (&#13;&#10;              &lt;option key={m.name} value={m.name}&gt;&#13;&#10;                {m.displayName || m.name}&#13;&#10;              &lt;/option&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/select&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div className=&quot;flex items-center justify-end mt-3&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#13;&#10;          &lt;span className=&quot;text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;            {input.length}/1000&#13;&#10;          &lt;/span&gt;&#13;&#10;          &lt;button&#13;&#10;            className=&quot;bg-black dark:bg-gray-700 hover:bg-gray-800 dark:hover:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors&quot;&#13;&#10;            onClick={onSubmit}&#13;&#10;            disabled={loading || (!input.trim() &amp;&amp; !imagePreview)}&#13;&#10;          &gt;&#13;&#10;            &lt;span className=&quot;text-sm&quot;&gt;{loading ? &quot;Sending...&quot; : &quot;Send&quot;}&lt;/span&gt;&#13;&#10;            &lt;ArrowRight className=&quot;w-4 h-4&quot; /&gt;&#13;&#10;          &lt;/button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {error &amp;&amp; (&#13;&#10;        &lt;div className=&quot;text-red-500 dark:text-red-400 text-sm mt-2&quot;&gt;{error}&lt;/div&gt;&#13;&#10;      )}&#13;&#10;      {speechError &amp;&amp; (&#13;&#10;        &lt;div className=&quot;text-red-500 dark:text-red-400 text-sm mt-2&quot;&gt;&#13;&#10;          {speechError}&#13;&#10;        &lt;/div&gt;&#13;&#10;      )}&#13;&#10;    &lt;/footer&gt;&#13;&#10;  );&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/Message.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/Message.js" />
              <option name="originalContent" value="import { useState } from &quot;react&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { Copy, Edit3, Check, X as XIcon, RotateCcw } from &quot;lucide-react&quot;;&#10;import { TextToSpeechButton } from &quot;@/components/SpeechControls&quot;;&#10;import { useSpeech } from &quot;@/hooks/useSpeech&quot;;&#10;import Markdown from &quot;react-markdown&quot;;&#10;import remarkGfm from &quot;remark-gfm&quot;;&#10;import { CodeBlock } from &quot;@/components/CodeBlock&quot;;&#10;&#10;export const Message = ({&#10;  isAI,&#10;  content,&#10;  time,&#10;  isStreaming,&#10;  imageUrl,&#10;  imageData,&#10;  messageId,&#10;  onRegenerate,&#10;  onEdit,&#10;  isLastUserMessage,&#10;}) =&gt; {&#10;  const { isSpeaking, speak, stopSpeaking } = useSpeech();&#10;  const [showActions, setShowActions] = useState(false);&#10;  const [isEditing, setIsEditing] = useState(false);&#10;  const [editContent, setEditContent] = useState(content);&#10;  const [copySuccess, setCopySuccess] = useState(false);&#10;&#10;  const handleCopy = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(content);&#10;      setCopySuccess(true);&#10;      setTimeout(() =&gt; setCopySuccess(false), 2000);&#10;    } catch (err) {&#10;      console.error(&quot;Failed to copy text: &quot;, err);&#10;    }&#10;  };&#10;&#10;  const handleEdit = () =&gt; {&#10;    setIsEditing(true);&#10;    setEditContent(content);&#10;  };&#10;&#10;  const handleSaveEdit = () =&gt; {&#10;    if (editContent.trim() !== content) {&#10;      onEdit(messageId, editContent.trim());&#10;    }&#10;    setIsEditing(false);&#10;  };&#10;&#10;  const handleCancelEdit = () =&gt; {&#10;    setIsEditing(false);&#10;    setEditContent(content);&#10;  };&#10;&#10;  const handleRegenerate = () =&gt; {&#10;    onRegenerate();&#10;  };&#10;&#10;  // Custom components for react-markdown&#10;  const markdownComponents = {&#10;    code: CodeBlock,&#10;    pre: ({ children }) =&gt; &lt;div&gt;{children}&lt;/div&gt;, // Remove default pre wrapper&#10;    // Enhanced blockquote styling&#10;    blockquote: ({ children }) =&gt; (&#10;      &lt;blockquote className=&quot;border-l-4 border-blue-500 pl-4 py-2 my-4 bg-blue-50 text-gray-700 italic&quot;&gt;&#10;        {children}&#10;      &lt;/blockquote&gt;&#10;    ),&#10;    // Enhanced table styling&#10;    table: ({ children }) =&gt; (&#10;      &lt;div className=&quot;overflow-x-auto my-4&quot;&gt;&#10;        &lt;table className=&quot;min-w-full border border-gray-200 rounded-lg&quot;&gt;&#10;          {children}&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;    th: ({ children }) =&gt; (&#10;      &lt;th className=&quot;px-4 py-2 bg-gray-100 border-b border-gray-200 text-left font-semibold text-gray-800&quot;&gt;&#10;        {children}&#10;      &lt;/th&gt;&#10;    ),&#10;    td: ({ children }) =&gt; (&#10;      &lt;td className=&quot;px-4 py-2 border-b border-gray-100 text-gray-700&quot;&gt;&#10;        {children}&#10;      &lt;/td&gt;&#10;    ),&#10;    // Enhanced list styling&#10;    ul: ({ children }) =&gt; (&#10;      &lt;ul className=&quot;list-disc list-inside space-y-1 my-2 text-gray-700&quot;&gt;&#10;        {children}&#10;      &lt;/ul&gt;&#10;    ),&#10;    ol: ({ children }) =&gt; (&#10;      &lt;ol className=&quot;list-decimal list-inside space-y-1 my-2 text-gray-700&quot;&gt;&#10;        {children}&#10;      &lt;/ol&gt;&#10;    ),&#10;    // Enhanced link styling&#10;    a: ({ href, children }) =&gt; (&#10;      &lt;a&#10;        href={href}&#10;        target=&quot;_blank&quot;&#10;        rel=&quot;noopener noreferrer&quot;&#10;        className=&quot;text-blue-600 hover:text-blue-800 underline transition-colors&quot;&#10;      &gt;&#10;        {children}&#10;      &lt;/a&gt;&#10;    ),&#10;  };&#10;&#10;  return (&#10;    &lt;div&#10;      className=&quot;flex items-start space-x-3 group relative&quot;&#10;      onMouseEnter={() =&gt; setShowActions(true)}&#10;      onMouseLeave={() =&gt; setShowActions(false)}&#10;    &gt;&#10;      &lt;div&#10;        className={`w-8 h-8 rounded-full flex-shrink-0 flex items-center justify-center text-white text-sm font-semibold ${&#10;          isAI ? &quot;bg-gradient-to-r from-purple-500 to-pink-500&quot; : &quot;bg-blue-500&quot;&#10;        }`}&#10;      &gt;&#10;        {isAI ? &quot;AI&quot; : &quot;U&quot;}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;flex-1&quot;&gt;&#10;        &lt;div className=&quot;flex items-start space-x-2&quot;&gt;&#10;          &lt;div&#10;            className={`rounded-2xl px-4 py-3 max-w-3xl prose prose-sm max-w-none ${&#10;              isAI&#10;                ? &quot;bg-white border border-gray-200 text-gray-800&quot;&#10;                : &quot;bg-gray-100 text-gray-800&quot;&#10;            }`}&#10;          &gt;&#10;            {(imageData || imageUrl) &amp;&amp; (&#10;              &lt;div className=&quot;mb-3&quot;&gt;&#10;                {imageData ? (&#10;                  &lt;img&#10;                    src={imageData}&#10;                    alt=&quot;Uploaded image&quot;&#10;                    className=&quot;rounded-lg object-contain max-h-[300px] max-w-full&quot;&#10;                  /&gt;&#10;                ) : imageUrl &amp;&amp;&#10;                  (imageUrl.startsWith(&quot;/&quot;) || imageUrl.startsWith(&quot;http&quot;)) ? (&#10;                  &lt;Image&#10;                    src={imageUrl}&#10;                    alt=&quot;Uploaded image&quot;&#10;                    width={300}&#10;                    height={300}&#10;                    className=&quot;rounded-lg object-contain max-h-[300px]&quot;&#10;                    style={{ objectFit: &quot;contain&quot; }}&#10;                  /&gt;&#10;                ) : imageUrl ? (&#10;                  &lt;img&#10;                    src={`data:image/jpeg;base64,${imageUrl}`}&#10;                    alt=&quot;Uploaded image&quot;&#10;                    className=&quot;rounded-lg object-contain max-h-[300px] max-w-full&quot;&#10;                  /&gt;&#10;                ) : null}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {isEditing ? (&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;textarea&#10;                  value={editContent}&#10;                  onChange={(e) =&gt; setEditContent(e.target.value)}&#10;                  className=&quot;w-full p-2 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500&quot;&#10;                  rows={Math.max(2, editContent.split(&quot;\n&quot;).length)}&#10;                  autoFocus&#10;                /&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;button&#10;                    onClick={handleSaveEdit}&#10;                    className=&quot;flex items-center space-x-1 px-3 py-1 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-sm&quot;&#10;                  &gt;&#10;                    &lt;Check size={14} /&gt;&#10;                    &lt;span&gt;Save&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={handleCancelEdit}&#10;                    className=&quot;flex items-center space-x-1 px-3 py-1 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors text-sm&quot;&#10;                  &gt;&#10;                    &lt;XIcon size={14} /&gt;&#10;                    &lt;span&gt;Cancel&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;prose prose-sm max-w-none prose-code:bg-transparent prose-pre:bg-transparent prose-pre:p-0&quot;&gt;&#10;                &lt;Markdown&#10;                  remarkPlugins={[remarkGfm]}&#10;                  components={markdownComponents}&#10;                &gt;&#10;                  {content || &quot;&quot;}&#10;                &lt;/Markdown&gt;&#10;                {isStreaming &amp;&amp; (&#10;                  &lt;span className=&quot;inline-block w-2 h-4 ml-1 bg-gray-800 animate-pulse&quot;&gt;&#10;                    &amp;#8203;&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          {isAI &amp;&amp; content &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TextToSpeechButton&#10;              isSpeaking={isSpeaking}&#10;              onSpeak={speak}&#10;              onStopSpeaking={stopSpeaking}&#10;              text={content}&#10;            /&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Menu */}&#10;        {showActions &amp;&amp; !isStreaming &amp;&amp; !isEditing &amp;&amp; (&#10;          &lt;div className=&quot;absolute right-0 top-0 flex items-center space-x-1 bg-white border border-gray-200 rounded-lg shadow-lg p-1 z-10&quot;&gt;&#10;            &lt;button&#10;              onClick={handleCopy}&#10;              className={`p-2 rounded-md transition-colors ${&#10;                copySuccess&#10;                  ? &quot;bg-green-100 text-green-600&quot;&#10;                  : &quot;hover:bg-gray-100 text-gray-600&quot;&#10;              }`}&#10;              title=&quot;Copy message&quot;&#10;            &gt;&#10;              &lt;Copy size={14} /&gt;&#10;            &lt;/button&gt;&#10;&#10;            {!isAI &amp;&amp; (&#10;              &lt;button&#10;                onClick={handleEdit}&#10;                className=&quot;p-2 rounded-md hover:bg-gray-100 text-gray-600 transition-colors&quot;&#10;                title=&quot;Edit message&quot;&#10;              &gt;&#10;                &lt;Edit3 size={14} /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;&#10;            {isAI &amp;&amp; isLastUserMessage &amp;&amp; (&#10;              &lt;button&#10;                onClick={handleRegenerate}&#10;                className=&quot;p-2 rounded-md hover:bg-gray-100 text-gray-600 transition-colors&quot;&#10;                title=&quot;Regenerate response&quot;&#10;              &gt;&#10;                &lt;RotateCcw size={14} /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {time &amp;&amp; (&#10;          &lt;span className=&quot;text-xs text-gray-500 mt-1 block&quot;&gt;{time}&lt;/span&gt;&#10;            {time}&#10;          &lt;/span&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const LoadingSkeleton = () =&gt; (&#10;  &lt;div className=&quot;flex items-start space-x-3 animate-pulse&quot;&gt;&#10;    &lt;div className=&quot;w-8 h-8 rounded-full bg-gradient-to-r from-purple-300 to-pink-300 flex-shrink-0&quot; /&gt;&#10;    &lt;div className=&quot;flex-1&quot;&gt;&#10;      &lt;div className=&quot;rounded-2xl px-4 py-3 max-w-3xl bg-gray-100 h-6 mb-2&quot; /&gt;&#10;      &lt;div className=&quot;rounded-2xl px-4 py-3 max-w-xl bg-gray-100 h-4&quot; /&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;);&#10;" />
              <option name="updatedContent" value="import { useState } from &quot;react&quot;;&#10;import Image from &quot;next/image&quot;;&#10;import { Copy, Edit3, Check, X as XIcon, RotateCcw } from &quot;lucide-react&quot;;&#10;import { TextToSpeechButton } from &quot;@/components/SpeechControls&quot;;&#10;import { useSpeech } from &quot;@/hooks/useSpeech&quot;;&#10;import Markdown from &quot;react-markdown&quot;;&#10;import remarkGfm from &quot;remark-gfm&quot;;&#10;import { CodeBlock } from &quot;@/components/CodeBlock&quot;;&#10;&#10;export const Message = ({&#10;  isAI,&#10;  content,&#10;  time,&#10;  isStreaming,&#10;  imageUrl,&#10;  imageData,&#10;  messageId,&#10;  onRegenerate,&#10;  onEdit,&#10;  isLastUserMessage,&#10;}) =&gt; {&#10;  const { isSpeaking, speak, stopSpeaking } = useSpeech();&#10;  const [showActions, setShowActions] = useState(false);&#10;  const [isEditing, setIsEditing] = useState(false);&#10;  const [editContent, setEditContent] = useState(content);&#10;  const [copySuccess, setCopySuccess] = useState(false);&#10;&#10;  const handleCopy = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(content);&#10;      setCopySuccess(true);&#10;      setTimeout(() =&gt; setCopySuccess(false), 2000);&#10;    } catch (err) {&#10;      console.error(&quot;Failed to copy text: &quot;, err);&#10;    }&#10;  };&#10;&#10;  const handleEdit = () =&gt; {&#10;    setIsEditing(true);&#10;    setEditContent(content);&#10;  };&#10;&#10;  const handleSaveEdit = () =&gt; {&#10;    if (editContent.trim() !== content) {&#10;      onEdit(messageId, editContent.trim());&#10;    }&#10;    setIsEditing(false);&#10;  };&#10;&#10;  const handleCancelEdit = () =&gt; {&#10;    setIsEditing(false);&#10;    setEditContent(content);&#10;  };&#10;&#10;  const handleRegenerate = () =&gt; {&#10;    onRegenerate();&#10;  };&#10;&#10;  // Custom components for react-markdown&#10;  const markdownComponents = {&#10;    code: CodeBlock,&#10;    pre: ({ children }) =&gt; &lt;div&gt;{children}&lt;/div&gt;, // Remove default pre wrapper&#10;    // Enhanced blockquote styling&#10;    blockquote: ({ children }) =&gt; (&#10;      &lt;blockquote className=&quot;border-l-4 border-blue-500 pl-4 py-2 my-4 bg-blue-50 dark:bg-blue-900/30 text-gray-700 dark:text-gray-300 italic&quot;&gt;&#10;        {children}&#10;      &lt;/blockquote&gt;&#10;    ),&#10;    // Enhanced table styling&#10;    table: ({ children }) =&gt; (&#10;      &lt;div className=&quot;overflow-x-auto my-4&quot;&gt;&#10;        &lt;table className=&quot;min-w-full border border-gray-200 dark:border-gray-600 rounded-lg&quot;&gt;&#10;          {children}&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;    th: ({ children }) =&gt; (&#10;      &lt;th className=&quot;px-4 py-2 bg-gray-100 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600 text-left font-semibold text-gray-800 dark:text-white&quot;&gt;&#10;        {children}&#10;      &lt;/th&gt;&#10;    ),&#10;    td: ({ children }) =&gt; (&#10;      &lt;td className=&quot;px-4 py-2 border-b border-gray-100 dark:border-gray-600 text-gray-700 dark:text-gray-300&quot;&gt;&#10;        {children}&#10;      &lt;/td&gt;&#10;    ),&#10;    // Enhanced list styling&#10;    ul: ({ children }) =&gt; (&#10;      &lt;ul className=&quot;list-disc list-inside space-y-1 my-2 text-gray-700 dark:text-gray-300&quot;&gt;&#10;        {children}&#10;      &lt;/ul&gt;&#10;    ),&#10;    ol: ({ children }) =&gt; (&#10;      &lt;ol className=&quot;list-decimal list-inside space-y-1 my-2 text-gray-700 dark:text-gray-300&quot;&gt;&#10;        {children}&#10;      &lt;/ol&gt;&#10;    ),&#10;    // Enhanced link styling&#10;    a: ({ href, children }) =&gt; (&#10;      &lt;a&#10;        href={href}&#10;        target=&quot;_blank&quot;&#10;        rel=&quot;noopener noreferrer&quot;&#10;        className=&quot;text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline transition-colors&quot;&#10;      &gt;&#10;        {children}&#10;      &lt;/a&gt;&#10;    ),&#10;  };&#10;&#10;  return (&#10;    &lt;div&#10;      className=&quot;flex items-start space-x-3 group relative&quot;&#10;      onMouseEnter={() =&gt; setShowActions(true)}&#10;      onMouseLeave={() =&gt; setShowActions(false)}&#10;    &gt;&#10;      &lt;div&#10;        className={`w-8 h-8 rounded-full flex-shrink-0 flex items-center justify-center text-white text-sm font-semibold ${&#10;          isAI ? &quot;bg-gradient-to-r from-purple-500 to-pink-500&quot; : &quot;bg-blue-500&quot;&#10;        }`}&#10;      &gt;&#10;        {isAI ? &quot;AI&quot; : &quot;U&quot;}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;flex-1&quot;&gt;&#10;        &lt;div className=&quot;flex items-start space-x-2&quot;&gt;&#10;          &lt;div&#10;            className={`rounded-2xl px-4 py-3 max-w-3xl prose prose-sm max-w-none ${&#10;              isAI&#10;                ? &quot;bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 text-gray-800 dark:text-gray-200&quot;&#10;                : &quot;bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200&quot;&#10;            }`}&#10;          &gt;&#10;            {(imageData || imageUrl) &amp;&amp; (&#10;              &lt;div className=&quot;mb-3&quot;&gt;&#10;                {imageData ? (&#10;                  &lt;img&#10;                    src={imageData}&#10;                    alt=&quot;Uploaded image&quot;&#10;                    className=&quot;rounded-lg object-contain max-h-[300px] max-w-full&quot;&#10;                  /&gt;&#10;                ) : imageUrl &amp;&amp;&#10;                  (imageUrl.startsWith(&quot;/&quot;) || imageUrl.startsWith(&quot;http&quot;)) ? (&#10;                  &lt;Image&#10;                    src={imageUrl}&#10;                    alt=&quot;Uploaded image&quot;&#10;                    width={300}&#10;                    height={300}&#10;                    className=&quot;rounded-lg object-contain max-h-[300px]&quot;&#10;                    style={{ objectFit: &quot;contain&quot; }}&#10;                  /&gt;&#10;                ) : imageUrl ? (&#10;                  &lt;img&#10;                    src={`data:image/jpeg;base64,${imageUrl}`}&#10;                    alt=&quot;Uploaded image&quot;&#10;                    className=&quot;rounded-lg object-contain max-h-[300px] max-w-full&quot;&#10;                  /&gt;&#10;                ) : null}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {isEditing ? (&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;textarea&#10;                  value={editContent}&#10;                  onChange={(e) =&gt; setEditContent(e.target.value)}&#10;                  className=&quot;w-full p-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-white rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500&quot;&#10;                  rows={Math.max(2, editContent.split(&quot;\n&quot;).length)}&#10;                  autoFocus&#10;                /&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;button&#10;                    onClick={handleSaveEdit}&#10;                    className=&quot;flex items-center space-x-1 px-3 py-1 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-sm&quot;&#10;                  &gt;&#10;                    &lt;Check size={14} /&gt;&#10;                    &lt;span&gt;Save&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={handleCancelEdit}&#10;                    className=&quot;flex items-center space-x-1 px-3 py-1 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors text-sm&quot;&#10;                  &gt;&#10;                    &lt;XIcon size={14} /&gt;&#10;                    &lt;span&gt;Cancel&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;prose prose-sm max-w-none prose-code:bg-transparent prose-pre:bg-transparent prose-pre:p-0 dark:prose-invert&quot;&gt;&#10;                &lt;Markdown&#10;                  remarkPlugins={[remarkGfm]}&#10;                  components={markdownComponents}&#10;                &gt;&#10;                  {content || &quot;&quot;}&#10;                &lt;/Markdown&gt;&#10;                {isStreaming &amp;&amp; (&#10;                  &lt;span className=&quot;inline-block w-2 h-4 ml-1 bg-gray-800 dark:bg-gray-300 animate-pulse&quot;&gt;&#10;                    &amp;#8203;&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          {isAI &amp;&amp; content &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TextToSpeechButton&#10;              isSpeaking={isSpeaking}&#10;              onSpeak={speak}&#10;              onStopSpeaking={stopSpeaking}&#10;              text={content}&#10;            /&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Menu */}&#10;        {showActions &amp;&amp; !isStreaming &amp;&amp; !isEditing &amp;&amp; (&#10;          &lt;div className=&quot;absolute right-0 top-0 flex items-center space-x-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg p-1 z-10&quot;&gt;&#10;            &lt;button&#10;              onClick={handleCopy}&#10;              className={`p-2 rounded-md transition-colors ${&#10;                copySuccess&#10;                  ? &quot;bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400&quot;&#10;                  : &quot;hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-600 dark:text-gray-400&quot;&#10;              }`}&#10;              title=&quot;Copy message&quot;&#10;            &gt;&#10;              &lt;Copy size={14} /&gt;&#10;            &lt;/button&gt;&#10;&#10;            {!isAI &amp;&amp; (&#10;              &lt;button&#10;                onClick={handleEdit}&#10;                className=&quot;p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-600 dark:text-gray-400 transition-colors&quot;&#10;                title=&quot;Edit message&quot;&#10;              &gt;&#10;                &lt;Edit3 size={14} /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;&#10;            {isAI &amp;&amp; isLastUserMessage &amp;&amp; (&#10;              &lt;button&#10;                onClick={handleRegenerate}&#10;                className=&quot;p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-600 dark:text-gray-400 transition-colors&quot;&#10;                title=&quot;Regenerate response&quot;&#10;              &gt;&#10;                &lt;RotateCcw size={14} /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {time &amp;&amp; (&#10;          &lt;span className=&quot;text-xs text-gray-500 dark:text-gray-400 mt-1 block&quot;&gt;{time}&lt;/span&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const LoadingSkeleton = () =&gt; (&#10;  &lt;div className=&quot;flex items-start space-x-3 animate-pulse&quot;&gt;&#10;    &lt;div className=&quot;w-8 h-8 rounded-full bg-gradient-to-r from-purple-300 to-pink-300 flex-shrink-0&quot; /&gt;&#10;    &lt;div className=&quot;flex-1&quot;&gt;&#10;      &lt;div className=&quot;rounded-2xl px-4 py-3 max-w-3xl bg-gray-100 dark:bg-gray-700 h-6 mb-2&quot; /&gt;&#10;      &lt;div className=&quot;rounded-2xl px-4 py-3 max-w-xl bg-gray-100 dark:bg-gray-700 h-4&quot; /&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/PersonaSelector.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/PersonaSelector.js" />
              <option name="originalContent" value="import { useState, useRef, useEffect } from &quot;react&quot;;&#10;import { PERSONAS } from &quot;@/lib/personas&quot;;&#10;import { ChevronDown, Sparkles } from &quot;lucide-react&quot;;&#10;&#10;export const PersonaSelector = ({&#10;  selectedPersona,&#10;  onPersonaChange,&#10;  customPrompt,&#10;  onCustomPromptChange,&#10;  disabled,&#10;}) =&gt; {&#10;  const [isOpen, setIsOpen] = useState(false);&#10;  const [showCustomInput, setShowCustomInput] = useState(false);&#10;  const dropdownRef = useRef(null);&#10;  const textareaRef = useRef(null);&#10;&#10;  const handlePersonaSelect = (persona) =&gt; {&#10;    onPersonaChange(persona);&#10;    setIsOpen(false);&#10;    if (persona.id === &quot;custom&quot;) {&#10;      setShowCustomInput(true);&#10;      setTimeout(() =&gt; textareaRef.current?.focus(), 100);&#10;    } else {&#10;      setShowCustomInput(false);&#10;    }&#10;  };&#10;&#10;  const handleCustomPromptSave = () =&gt; {&#10;    setShowCustomInput(false);&#10;  };&#10;&#10;  const handleKeyDown = (e) =&gt; {&#10;    if (e.key === &quot;Enter&quot; &amp;&amp; !e.shiftKey) {&#10;      e.preventDefault();&#10;      handleCustomPromptSave();&#10;    }&#10;  };&#10;&#10;  const toggleDropdown = () =&gt; {&#10;    if (!disabled) {&#10;      setIsOpen(!isOpen);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    const handleClickOutside = (event) =&gt; {&#10;      if (dropdownRef.current &amp;&amp; !dropdownRef.current.contains(event.target)) {&#10;        setIsOpen(false);&#10;      }&#10;    };&#10;&#10;    document.addEventListener(&quot;mousedown&quot;, handleClickOutside);&#10;    return () =&gt; document.removeEventListener(&quot;mousedown&quot;, handleClickOutside);&#10;  }, []);&#10;&#10;  const selectedPersonaData =&#10;    PERSONAS.find((p) =&gt; p.id === selectedPersona) || PERSONAS[0];&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-2&quot;&gt;&#10;      {/* Compact Persona Button */}&#10;      &lt;div className=&quot;relative&quot; ref={dropdownRef}&gt;&#10;        &lt;button&#10;          onClick={toggleDropdown}&#10;          disabled={disabled}&#10;          className=&quot;inline-flex items-center space-x-2 px-3 py-2 bg-white border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 disabled:opacity-50&quot;&#10;        &gt;&#10;          &lt;span className=&quot;text-lg&quot;&gt;{selectedPersonaData.emoji}&lt;/span&gt;&#10;          &lt;span className=&quot;hidden sm:inline&quot;&gt;{selectedPersonaData.name}&lt;/span&gt;&#10;          &lt;span className=&quot;sm:hidden&quot;&gt;AI&lt;/span&gt;&#10;          {selectedPersona !== &quot;default&quot; &amp;&amp; (&#10;            &lt;div className=&quot;w-2 h-2 bg-purple-500 rounded-full&quot;&gt;&lt;/div&gt;&#10;          )}&#10;          &lt;ChevronDown&#10;            className={`w-4 h-4 transition-transform duration-200 ${&#10;              isOpen ? &quot;rotate-180&quot; : &quot;&quot;&#10;            }`}&#10;          /&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Compact Dropdown */}&#10;        {isOpen &amp;&amp; (&#10;          &lt;div className=&quot;absolute bottom-full left-0 mb-2 w-72 bg-white border border-gray-200 rounded-lg shadow-xl z-50 animate-in slide-in-from-bottom-2 duration-200&quot;&gt;&#10;            &lt;div className=&quot;p-2 border-b border-gray-100&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-medium text-gray-500 uppercase tracking-wide&quot;&gt;&#10;                Choose AI Persona&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;max-h-64 overflow-y-auto&quot;&gt;&#10;              {PERSONAS.map((persona) =&gt; (&#10;                &lt;button&#10;                  key={persona.id}&#10;                  onClick={() =&gt; handlePersonaSelect(persona)}&#10;                  className={`w-full flex items-center space-x-3 p-3 text-left hover:bg-gray-50 transition-colors duration-150 ${&#10;                    selectedPersona === persona.id&#10;                      ? &quot;bg-purple-50 border-r-2 border-purple-500&quot;&#10;                      : &quot;&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;span className=&quot;text-lg flex-shrink-0&quot;&gt;{persona.emoji}&lt;/span&gt;&#10;                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                    &lt;div className=&quot;font-medium text-gray-900 text-sm flex items-center space-x-1&quot;&gt;&#10;                      &lt;span className=&quot;truncate&quot;&gt;{persona.name}&lt;/span&gt;&#10;                      {persona.id !== &quot;default&quot; &amp;&amp; (&#10;                        &lt;Sparkles className=&quot;w-3 h-3 text-purple-500 flex-shrink-0&quot; /&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-500 truncate&quot;&gt;&#10;                      {persona.description}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  {selectedPersona === persona.id &amp;&amp; (&#10;                    &lt;div className=&quot;w-2 h-2 bg-purple-500 rounded-full flex-shrink-0&quot;&gt;&lt;/div&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Compact Custom Input */}&#10;      {showCustomInput &amp;&amp; (&#10;        &lt;div className=&quot;p-3 bg-amber-50 border border-amber-200 rounded-lg&quot;&gt;&#10;          &lt;label className=&quot;block text-xs font-medium text-amber-800 mb-2&quot;&gt;&#10;            Custom Prompt&#10;          &lt;/label&gt;&#10;          &lt;textarea&#10;            ref={textareaRef}&#10;            value={customPrompt}&#10;            onChange={(e) =&gt; onCustomPromptChange(e.target.value)}&#10;            onKeyDown={handleKeyDown}&#10;            placeholder=&quot;Define AI behavior...&quot;&#10;            className=&quot;w-full p-2 text-xs border border-amber-300 rounded focus:outline-none focus:ring-1 focus:ring-amber-400 resize-none text-gray-900 bg-white&quot;&#10;            rows={2}&#10;            disabled={disabled}&#10;          /&gt;&#10;          &lt;div className=&quot;flex justify-end mt-2 space-x-2&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowCustomInput(false)}&#10;              className=&quot;px-2 py-1 text-xs text-gray-600 hover:text-gray-800 transition-colors&quot;&#10;            &gt;&#10;              Cancel&#10;            &lt;/button&gt;&#10;            &lt;button&#10;              onClick={handleCustomPromptSave}&#10;              className=&quot;px-3 py-1 bg-amber-600 text-white text-xs rounded hover:bg-amber-700 transition-colors&quot;&#10;            &gt;&#10;              Save&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import { useState, useRef, useEffect } from &quot;react&quot;;&#13;&#10;import { PERSONAS } from &quot;@/lib/personas&quot;;&#13;&#10;import { ChevronDown, Sparkles } from &quot;lucide-react&quot;;&#13;&#10;&#13;&#10;export const PersonaSelector = ({&#13;&#10;  selectedPersona,&#13;&#10;  onPersonaChange,&#13;&#10;  customPrompt,&#13;&#10;  onCustomPromptChange,&#13;&#10;  disabled,&#13;&#10;}) =&gt; {&#13;&#10;  const [isOpen, setIsOpen] = useState(false);&#13;&#10;  const [showCustomInput, setShowCustomInput] = useState(false);&#13;&#10;  const dropdownRef = useRef(null);&#13;&#10;  const textareaRef = useRef(null);&#13;&#10;&#13;&#10;  const handlePersonaSelect = (persona) =&gt; {&#13;&#10;    onPersonaChange(persona);&#13;&#10;    setIsOpen(false);&#13;&#10;    if (persona.id === &quot;custom&quot;) {&#13;&#10;      setShowCustomInput(true);&#13;&#10;      setTimeout(() =&gt; textareaRef.current?.focus(), 100);&#13;&#10;    } else {&#13;&#10;      setShowCustomInput(false);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleCustomPromptSave = () =&gt; {&#13;&#10;    setShowCustomInput(false);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleKeyDown = (e) =&gt; {&#13;&#10;    if (e.key === &quot;Enter&quot; &amp;&amp; !e.shiftKey) {&#13;&#10;      e.preventDefault();&#13;&#10;      handleCustomPromptSave();&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const toggleDropdown = () =&gt; {&#13;&#10;    if (!disabled) {&#13;&#10;      setIsOpen(!isOpen);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    const handleClickOutside = (event) =&gt; {&#13;&#10;      if (dropdownRef.current &amp;&amp; !dropdownRef.current.contains(event.target)) {&#13;&#10;        setIsOpen(false);&#13;&#10;      }&#13;&#10;    };&#13;&#10;&#13;&#10;    document.addEventListener(&quot;mousedown&quot;, handleClickOutside);&#13;&#10;    return () =&gt; document.removeEventListener(&quot;mousedown&quot;, handleClickOutside);&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  const selectedPersonaData =&#13;&#10;    PERSONAS.find((p) =&gt; p.id === selectedPersona) || PERSONAS[0];&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;space-y-2&quot;&gt;&#13;&#10;      {/* Compact Persona Button */}&#13;&#10;      &lt;div className=&quot;relative&quot; ref={dropdownRef}&gt;&#13;&#10;        &lt;button&#13;&#10;          onClick={toggleDropdown}&#13;&#10;          disabled={disabled}&#13;&#10;          className=&quot;inline-flex items-center space-x-2 px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 disabled:opacity-50&quot;&#13;&#10;        &gt;&#13;&#10;          &lt;span className=&quot;text-lg&quot;&gt;{selectedPersonaData.emoji}&lt;/span&gt;&#13;&#10;          &lt;span className=&quot;hidden sm:inline&quot;&gt;{selectedPersonaData.name}&lt;/span&gt;&#13;&#10;          &lt;span className=&quot;sm:hidden&quot;&gt;AI&lt;/span&gt;&#13;&#10;          {selectedPersona !== &quot;default&quot; &amp;&amp; (&#13;&#10;            &lt;div className=&quot;w-2 h-2 bg-purple-500 rounded-full&quot;&gt;&lt;/div&gt;&#13;&#10;          )}&#13;&#10;          &lt;ChevronDown&#13;&#10;            className={`w-4 h-4 transition-transform duration-200 ${&#13;&#10;              isOpen ? &quot;rotate-180&quot; : &quot;&quot;&#13;&#10;            }`}&#13;&#10;          /&gt;&#13;&#10;        &lt;/button&gt;&#13;&#10;&#13;&#10;        {/* Compact Dropdown */}&#13;&#10;        {isOpen &amp;&amp; (&#13;&#10;          &lt;div className=&quot;absolute bottom-full left-0 mb-2 w-72 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-xl z-50 animate-in slide-in-from-bottom-2 duration-200&quot;&gt;&#13;&#10;            &lt;div className=&quot;p-2 border-b border-gray-100 dark:border-gray-700&quot;&gt;&#13;&#10;              &lt;p className=&quot;text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide&quot;&gt;&#13;&#10;                Choose AI Persona&#13;&#10;              &lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className=&quot;max-h-64 overflow-y-auto&quot;&gt;&#13;&#10;              {PERSONAS.map((persona) =&gt; (&#13;&#10;                &lt;button&#13;&#10;                  key={persona.id}&#13;&#10;                  onClick={() =&gt; handlePersonaSelect(persona)}&#13;&#10;                  className={`w-full flex items-center space-x-3 p-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-150 ${&#13;&#10;                    selectedPersona === persona.id&#13;&#10;                      ? &quot;bg-purple-50 dark:bg-purple-900/30 border-r-2 border-purple-500&quot;&#13;&#10;                      : &quot;&quot;&#13;&#10;                  }`}&#13;&#10;                &gt;&#13;&#10;                  &lt;span className=&quot;text-lg flex-shrink-0&quot;&gt;{persona.emoji}&lt;/span&gt;&#13;&#10;                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#13;&#10;                    &lt;div className=&quot;font-medium text-gray-900 dark:text-white text-sm flex items-center space-x-1&quot;&gt;&#13;&#10;                      &lt;span className=&quot;truncate&quot;&gt;{persona.name}&lt;/span&gt;&#13;&#10;                      {persona.id !== &quot;default&quot; &amp;&amp; (&#13;&#10;                        &lt;Sparkles className=&quot;w-3 h-3 text-purple-500 flex-shrink-0&quot; /&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div className=&quot;text-xs text-gray-500 dark:text-gray-400 truncate&quot;&gt;&#13;&#10;                      {persona.description}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  {selectedPersona === persona.id &amp;&amp; (&#13;&#10;                    &lt;div className=&quot;w-2 h-2 bg-purple-500 rounded-full flex-shrink-0&quot;&gt;&lt;/div&gt;&#13;&#10;                  )}&#13;&#10;                &lt;/button&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        )}&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Compact Custom Input */}&#13;&#10;      {showCustomInput &amp;&amp; (&#13;&#10;        &lt;div className=&quot;p-3 bg-amber-50 dark:bg-amber-900/30 border border-amber-200 dark:border-amber-700 rounded-lg&quot;&gt;&#13;&#10;          &lt;label className=&quot;block text-xs font-medium text-amber-800 dark:text-amber-300 mb-2&quot;&gt;&#13;&#10;            Custom Prompt&#13;&#10;          &lt;/label&gt;&#13;&#10;          &lt;textarea&#13;&#10;            ref={textareaRef}&#13;&#10;            value={customPrompt}&#13;&#10;            onChange={(e) =&gt; onCustomPromptChange(e.target.value)}&#13;&#10;            onKeyDown={handleKeyDown}&#13;&#10;            placeholder=&quot;Define AI behavior...&quot;&#13;&#10;            className=&quot;w-full p-2 text-xs border border-amber-300 dark:border-amber-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 rounded focus:outline-none focus:ring-1 focus:ring-amber-400 resize-none&quot;&#13;&#10;            rows={2}&#13;&#10;            disabled={disabled}&#13;&#10;          /&gt;&#13;&#10;          &lt;div className=&quot;flex justify-end mt-2 space-x-2&quot;&gt;&#13;&#10;            &lt;button&#13;&#10;              onClick={() =&gt; setShowCustomInput(false)}&#13;&#10;              className=&quot;px-2 py-1 text-xs text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-300 transition-colors&quot;&#13;&#10;            &gt;&#13;&#10;              Cancel&#13;&#10;            &lt;/button&gt;&#13;&#10;            &lt;button&#13;&#10;              onClick={handleCustomPromptSave}&#13;&#10;              className=&quot;px-3 py-1 bg-amber-600 text-white text-xs rounded hover:bg-amber-700 transition-colors&quot;&#13;&#10;            &gt;&#13;&#10;              Save&#13;&#10;            &lt;/button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      )}&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/SpeechControls.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/SpeechControls.js" />
              <option name="originalContent" value="import { Mic, MicOff, Volume2, VolumeX } from &quot;lucide-react&quot;;&#10;&#10;export const VoiceInputButton = ({&#10;  isListening,&#10;  onStartListening,&#10;  onStopListening,&#10;  disabled,&#10;}) =&gt; {&#10;  return (&#10;    &lt;button&#10;      onClick={isListening ? onStopListening : onStartListening}&#10;      disabled={disabled}&#10;      className={`p-2 rounded-lg transition-colors ${&#10;        isListening&#10;          ? &quot;bg-red-500 hover:bg-red-600 text-white animate-pulse&quot;&#10;          : &quot;bg-gray-100 hover:bg-gray-200 text-gray-600&quot;&#10;      } ${disabled ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;      title={isListening ? &quot;Stop listening&quot; : &quot;Start voice input&quot;}&#10;    &gt;&#10;      {isListening ? (&#10;        &lt;MicOff className=&quot;w-4 h-4&quot; /&gt;&#10;      ) : (&#10;        &lt;Mic className=&quot;w-4 h-4&quot; /&gt;&#10;      )}&#10;    &lt;/button&gt;&#10;  );&#10;};&#10;&#10;export const TextToSpeechButton = ({&#10;  isSpeaking,&#10;  onSpeak,&#10;  onStopSpeaking,&#10;  text,&#10;  disabled,&#10;}) =&gt; {&#10;  const handleClick = () =&gt; {&#10;    if (isSpeaking) {&#10;      onStopSpeaking();&#10;    } else {&#10;      onSpeak(text);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;button&#10;      onClick={handleClick}&#10;      disabled={disabled || !text?.trim()}&#10;      className={`p-2 rounded-lg transition-colors ${&#10;        isSpeaking&#10;          ? &quot;bg-blue-500 hover:bg-blue-600 text-white animate-pulse&quot;&#10;          : &quot;bg-gray-100 hover:bg-gray-200 text-gray-600&quot;&#10;      } ${disabled || !text?.trim() ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#10;      title={isSpeaking ? &quot;Stop speaking&quot; : &quot;Read aloud&quot;}&#10;    &gt;&#10;      {isSpeaking ? (&#10;        &lt;VolumeX className=&quot;w-4 h-4&quot; /&gt;&#10;      ) : (&#10;        &lt;Volume2 className=&quot;w-4 h-4&quot; /&gt;&#10;      )}&#10;    &lt;/button&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import { Mic, MicOff, Volume2, VolumeX } from &quot;lucide-react&quot;;&#13;&#10;&#13;&#10;export const VoiceInputButton = ({&#13;&#10;  isListening,&#13;&#10;  onStartListening,&#13;&#10;  onStopListening,&#13;&#10;  disabled,&#13;&#10;}) =&gt; {&#13;&#10;  return (&#13;&#10;    &lt;button&#13;&#10;      onClick={isListening ? onStopListening : onStartListening}&#13;&#10;      disabled={disabled}&#13;&#10;      className={`p-2 rounded-lg transition-colors ${&#13;&#10;        isListening&#13;&#10;          ? &quot;bg-red-500 hover:bg-red-600 text-white animate-pulse&quot;&#13;&#10;          : &quot;bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-300&quot;&#13;&#10;      } ${disabled ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#13;&#10;      title={isListening ? &quot;Stop listening&quot; : &quot;Start voice input&quot;}&#13;&#10;    &gt;&#13;&#10;      {isListening ? (&#13;&#10;        &lt;MicOff className=&quot;w-4 h-4&quot; /&gt;&#13;&#10;      ) : (&#13;&#10;        &lt;Mic className=&quot;w-4 h-4&quot; /&gt;&#13;&#10;      )}&#13;&#10;    &lt;/button&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export const TextToSpeechButton = ({&#13;&#10;  isSpeaking,&#13;&#10;  onSpeak,&#13;&#10;  onStopSpeaking,&#13;&#10;  text,&#13;&#10;  disabled,&#13;&#10;}) =&gt; {&#13;&#10;  const handleClick = () =&gt; {&#13;&#10;    if (isSpeaking) {&#13;&#10;      onStopSpeaking();&#13;&#10;    } else {&#13;&#10;      onSpeak(text);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;button&#13;&#10;      onClick={handleClick}&#13;&#10;      disabled={disabled || !text?.trim()}&#13;&#10;      className={`p-2 rounded-lg transition-colors ${&#13;&#10;        isSpeaking&#13;&#10;          ? &quot;bg-blue-500 hover:bg-blue-600 text-white animate-pulse&quot;&#13;&#10;          : &quot;bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-300&quot;&#13;&#10;      } ${disabled ? &quot;opacity-50 cursor-not-allowed&quot; : &quot;&quot;}`}&#13;&#10;      title={isSpeaking ? &quot;Stop speaking&quot; : &quot;Read aloud&quot;}&#13;&#10;    &gt;&#13;&#10;      {isSpeaking ? (&#13;&#10;        &lt;VolumeX className=&quot;w-4 h-4&quot; /&gt;&#13;&#10;      ) : (&#13;&#10;        &lt;Volume2 className=&quot;w-4 h-4&quot; /&gt;&#13;&#10;      )}&#13;&#10;    &lt;/button&gt;&#13;&#10;  );&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>